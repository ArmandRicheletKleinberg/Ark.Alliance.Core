<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ark.Api.Binance</name>
    </assembly>
    <members>
        <member name="T:Ark.Api.Binance.AccountBusiness">
            <summary>
            Provides account level operations.
            + Adjusts trading parameters for a <see cref="T:Ark.Api.Binance.BinanceSession"/>.
            - Does not create sessions automatically when missing.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#change-initial-leverage-trade"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.AccountBusiness.ChangeLeverageAsync(System.Guid,System.String,System.Int32)">
            <summary>
            Changes the leverage for a symbol on an existing session via
            <see cref="M:Ark.Api.Binance.AccountHelper.ChangeLeverageAsync(Ark.Api.Binance.BinanceSession,System.String,System.Int32,System.Threading.CancellationToken)"/>.
            + Allows dynamic risk adjustment per symbol.
            - Returns <see cref="P:Ark.Result.NotFound"/> if the session is absent in
              <see cref="T:Ark.Api.Binance.BinanceSessionManagerCache"/>.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#change-initial-leverage-trade"/>
            </summary>
            <param name="sessionId">Identifier of the session using standard GUID format.</param>
            <param name="symbol">Trading pair symbol, e.g. "BTCUSDT".</param>
            <param name="leverage">Desired leverage level in integer form.</param>
            <returns>
            A <see cref="T:Ark.Result"/> indicating success or failure.
            Example JSON:
            {
              "Status": "Success"
            }
            </returns>
        </member>
        <member name="T:Ark.Api.Binance.OrderBusiness">
            <summary>
            Provides order management operations for Binance futures.
            + Wraps order endpoints with session cache lookups.
            - Requires an existing session; none are created on demand.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#new-order-trade"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.OrderBusiness.PlaceOrderAsync(System.Guid,Ark.Api.Binance.FuturesOrder)">
            <summary>
            Places a futures order on an existing session.
            + Applies session-level rate limit checks before forwarding to Binance.
            - Returns <see cref="F:Ark.ResultStatus.NotFound"/> if the session is missing.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#new-order-trade"/>
            </summary>
            <param name="sessionId">Identifier of the session using standard GUID format.</param>
            <param name="order">Order parameters.</param>
            <returns>
            The created order result or <see cref="F:Ark.ResultStatus.NotFound"/>.
            Example JSON:
            {
              "OrderId": 123456,
              "Status": "New"
            }
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.OrderBusiness.ModifyOrderAsync(System.Guid,System.Int64,Ark.Api.Binance.FuturesOrder)">
            <summary>
            Replaces an order by cancelling it and creating a new one.
            + Maintains atomicity by using a cancel/replace pattern.
            - Fails with <see cref="F:Ark.ResultStatus.NotFound"/> if the session is missing.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#cancel-replace-order-trade"/>
            </summary>
            <param name="sessionId">Identifier of the session using standard GUID format.</param>
            <param name="orderId">Identifier of the order to replace.</param>
            <param name="order">New order parameters.</param>
            <returns>
            The newly placed order result or <see cref="F:Ark.ResultStatus.NotFound"/>.
            Example JSON:
            {
              "OrderId": 123457,
              "Status": "Replaced"
            }
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.OrderBusiness.CancelOrderAsync(System.Guid,System.String,System.Int64)">
            <summary>
            Cancels an existing order.
            + Releases margin by removing pending orders.
            - Returns <see cref="F:Ark.ResultStatus.NotFound"/> when the session is absent.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#cancel-order-trade"/>
            </summary>
            <param name="sessionId">Identifier of the session using standard GUID format.</param>
            <param name="symbol">Trading symbol such as "BTCUSDT".</param>
            <param name="orderId">Order identifier from Binance.</param>
            <returns>
            A result describing the cancellation.
            Example JSON:
            {
              "Status": "Canceled"
            }
            </returns>
        </member>
        <member name="T:Ark.Api.Binance.SessionBusiness">
            <summary>
            Provides session lifecycle operations.
            + Centralizes session creation and overview retrieval.
            - Sessions are stored in-memory and lost on application restart.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.SessionBusiness.CreateSession(Ark.Api.Binance.BinanceOptions)">
            <summary>
            Creates a new Binance session.
            + Configures API credentials and rate limiter for isolated trading.
            - Returns <see cref="F:Ark.ResultStatus.Failure"/> when options are invalid.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/"/>
            </summary>
            <param name="options">Binance configuration options.</param>
            <returns>
            The created session identifier.
            Example JSON:
            {
              "SessionId": "e0a1f5d9-1c2b-4d2b-9b4f-8f7a9e3c6b2d"
            }
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.SessionBusiness.GetSessionOptions(System.Guid)">
            <summary>
            Gets the options used when a session was created.
            + Allows diagnostics of runtime configuration.
            - Returns <see cref="F:Ark.ResultStatus.NotFound"/> if the session does not exist.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/"/>
            </summary>
            <param name="id">Session identifier.</param>
            <returns>
            The stored options or <see cref="F:Ark.ResultStatus.NotFound"/>.
            Example JSON:
            {
              "ApiKey": "YOUR_KEY"
            }
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.SessionBusiness.GetSessionOverviewAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Retrieves aggregated session data including orders and positions.
            + Combines current positions and order metrics in a single call.
            - Returns <see cref="F:Ark.ResultStatus.NotFound"/> if the session is absent.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/"/>
            </summary>
            <param name="id">Session identifier.</param>
            <param name="window">Time window to filter data.</param>
            <returns>
            The session overview or <see cref="F:Ark.ResultStatus.NotFound"/>.
            Example JSON:
            {
              "Orders": [],
              "Positions": []
            }
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.SessionBusiness.Ping">
            <summary>
            Simple ping result used for health checks.
            + Confirms API layer responsiveness.
            - Provides no trading functionality.
            Ref: <see href="https://en.wikipedia.org/wiki/Ping_(networking)"/>
            </summary>
            <returns>
            "pong" if the service is reachable.
            Example JSON:
            {
              "Data": "pong"
            }
            </returns>
        </member>
        <member name="T:Ark.Api.Binance.WalletBusiness">
            <summary>
            Handles asset transfers between Binance futures and funding wallets.
            + Simplifies rebalancing profit and collateral.
            - Requires an existing session; none are created automatically.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#asset-transfer-futures-funding-wallet-trade"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.WalletBusiness.TransferFuturesToFundingAsync(System.Guid,System.String,System.Decimal)">
            <summary>
            Transfers funds from futures to funding wallet.
            + Moves realized profit to funding account.
            - Returns <see cref="P:Ark.Result.NotFound"/> if the session is missing.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#asset-transfer-futures-funding-wallet-trade"/>
            </summary>
            <param name="sessionId">Identifier of the session using standard GUID format.</param>
            <param name="asset">Asset symbol, e.g. "USDT".</param>
            <param name="quantity">Quantity to transfer.</param>
            <returns>
            A <see cref="T:Ark.Result"/> indicating success or failure.
            Example JSON:
            {
              "Status": "Success"
            }
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.WalletBusiness.TransferFundingToFuturesAsync(System.Guid,System.String,System.Decimal)">
            <summary>
            Transfers funds from funding wallet to futures.
            + Provides collateral for new positions.
            - Returns <see cref="P:Ark.Result.NotFound"/> if the session is missing.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#asset-transfer-futures-funding-wallet-trade"/>
            </summary>
            <param name="sessionId">Identifier of the session using standard GUID format.</param>
            <param name="asset">Asset symbol, e.g. "USDT".</param>
            <param name="quantity">Quantity to transfer.</param>
            <returns>
            A <see cref="T:Ark.Result"/> indicating success or failure.
            Example JSON:
            {
              "Status": "Success"
            }
            </returns>
        </member>
        <member name="T:Ark.Api.Binance.BinanceApiClient">
            <summary>
            Wrapper around <see cref="T:Binance.Net.Clients.BinanceRestClient"/> and <see cref="T:Binance.Net.Clients.BinanceSocketClient"/> to expose common operations.
            + Provides convenience methods with integrated logging and error handling.
            - Mirrors Binance endpoints closely; breaking API changes propagate here.
            </summary>
            <remarks>
            This client exposes higher level methods used by <see cref="T:Ark.Api.Binance.BinanceApiClientManager"/> and
            <see cref="T:Ark.Api.Binance.BinanceSession"/> to communicate with the Binance REST and WebSocket APIs.
            </remarks>
            <example>
            <code>
            var client = new BinanceApiClient(options);
            var result = await client.GetTickerAsync("BTCUSDT", CancellationToken.None);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.#ctor(Microsoft.Extensions.Options.IOptions{Ark.Api.Binance.BinanceOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.BinanceApiClient"/> class.
            </summary>
            <param name="options">Configuration options for Binance connectivity.</param>
            <remarks>
            The API and socket clients are created with the provided credentials.
            </remarks>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.SubscribeTickerAsync(System.String,System.Action{Ark.Api.Binance.TickerDto},System.Threading.CancellationToken,Binance.Net.Enums.KlineInterval)">
            <summary>
            Subscribe to kline updates for a symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="onTick">Callback invoked for each ticker update.</param>
            <param name="token">Token used to cancel the subscription.</param>
            <param name="interval">The kline update interval. Defaults to <see cref="F:Binance.Net.Enums.KlineInterval.OneSecond"/>.</param>
            <returns>A <see cref="T:Ark.Result"/> indicating success or failure.</returns>
            <remarks>
            The method connects to the Binance websocket API and listens for updates.
            </remarks>
            <example>
            <code>
            await client.SubscribeTickerAsync("BTCUSDT", CancellationToken.None);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the current ticker price for a symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="token">Cancellation token.</param>
            <returns>The ticker price wrapped in a <see cref="T:Ark.Result`1"/>.</returns>
            <remarks>
            The returned object is the raw response from Binance.
            </remarks>
            <example>
            <code>
            var ticker = await client.GetTickerAsync("BTCUSDT", CancellationToken.None);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets open orders for the current account.
            </summary>
            <param name="symbol">Optional trading symbol to filter orders.</param>
            <param name="token">Cancellation token.</param>
            <returns>A <see cref="T:Ark.Result`1"/> containing the orders.</returns>
            <remarks>
            When no symbol is provided Binance returns all open orders for the account.
            </remarks>
            <example>
            <code>
            var orders = await client.GetOpenOrdersAsync("BTCUSDT", CancellationToken.None);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns available account balances.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>The account balances.</returns>
            <remarks>
            The result contains the raw Binance balance objects.
            </remarks>
            <example>
            <code>
            var balances = await client.GetBalancesAsync();
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetPositionsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns current open positions.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>The list of positions.</returns>
            <remarks>
            This call queries the futures trading API.
            </remarks>
            <example>
            <code>
            var positions = await client.GetPositionsAsync();
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetTradeHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns trade history for a symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="token">Cancellation token.</param>
            <returns>List of trades for the given symbol.</returns>
            <example>
            <code>
            var trades = await client.GetTradeHistoryAsync("BTCUSDT");
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetIncomeHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns futures income history.
            </summary>
            <param name="symbol">Optional trading symbol.</param>
            <param name="token">Cancellation token.</param>
            <returns>The income events recorded by Binance.</returns>
            <example>
            <code>
            var income = await client.GetIncomeHistoryAsync();
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the exchange info containing rate limits.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Exchange information provided by Binance.</returns>
            <example>
            <code>
            var info = await client.GetExchangeInfoAsync();
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetMaxLeverageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the maximum initial leverage for a symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="token">Cancellation token.</param>
            <returns>The maximum leverage or <c>null</c> if unavailable.</returns>
            <example>
            <code>
            var leverage = await client.GetMaxLeverageAsync("BTCUSDT");
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetQuantityPrecisionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the quantity precision allowed for a futures symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="token">Cancellation token.</param>
            <returns>Number of decimal places permitted or <c>null</c> if unknown.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.ChangeInitialLeverageAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Changes the initial leverage for a symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="leverage">Leverage to apply.</param>
            <param name="token">Cancellation token.</param>
            <returns>A result describing the outcome.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.PlaceOrderAsync(Ark.Api.Binance.FuturesOrder,System.Threading.CancellationToken)">
            <summary>
            Places a new futures order.
            </summary>
            <param name="order">Order parameters.</param>
            <param name="token">Cancellation token.</param>
            <returns>Information about the created order.</returns>
            <example>
            <code>
            var result = await client.PlaceOrderAsync(order);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.CancelOrderAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels an existing order.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="orderId">Identifier assigned by Binance.</param>
            <param name="token">Cancellation token.</param>
            <returns>A <see cref="T:Ark.Result"/> describing the outcome.</returns>
            <example>
            <code>
            await client.CancelOrderAsync("BTCUSDT", 1);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.ModifyOrderAsync(System.Int64,Ark.Api.Binance.FuturesOrder,System.Threading.CancellationToken)">
            <summary>
            Modifies an order by cancelling and creating a new one.
            </summary>
            <param name="orderId">Identifier of the order to replace.</param>
            <param name="newOrder">New order parameters.</param>
            <param name="token">Cancellation token.</param>
            <returns>The result of the newly placed order.</returns>
            <example>
            <code>
            var updated = await client.ModifyOrderAsync(id, order);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetFuturesQuoteAvailableAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the available balance for a futures quote asset.
            </summary>
            <param name="asset">Quote asset ticker (USDT or USDC).</param>
            <param name="token">Cancellation token.</param>
            <returns>The available amount for trading.</returns>
            <example>
            <code>
            var amount = await client.GetFuturesQuoteAvailableAsync("USDT");
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.GetFundingAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the assets available in the funding wallet.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>The raw funding wallet assets.</returns>
            <example>
            <code>
            var assets = await client.GetFundingAssetsAsync();
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.TransferFuturesToFundingAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Transfers funds from the futures wallet to the funding wallet.
            </summary>
            <param name="asset">Asset ticker.</param>
            <param name="quantity">Quantity to transfer.</param>
            <param name="token">Cancellation token.</param>
            <returns>A <see cref="T:Ark.Result"/> describing the transfer.</returns>
            <example>
            <code>
            await client.TransferFuturesToFundingAsync("USDT", 10m);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClient.TransferFundingToFuturesAsync(System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Transfers funds from the funding wallet to the futures wallet.
            </summary>
            <param name="asset">Asset ticker.</param>
            <param name="quantity">Quantity to transfer.</param>
            <param name="token">Cancellation token.</param>
            <returns>A <see cref="T:Ark.Result"/> describing the transfer.</returns>
            <example>
            <code>
            await client.TransferFundingToFuturesAsync("USDT", 10m);
            </code>
            </example>
        </member>
        <member name="T:Ark.Api.Binance.BinanceApiClientManager">
            <summary>
            Provides a singleton instance of <see cref="T:Ark.Api.Binance.BinanceApiClient"/> with
            automatic recovery and rate limiting.
            + Enforces concurrency limits and retries for robustness.
            - Global singleton may become a bottleneck under extreme load.
            </summary>
            <remarks>
            The manager should be configured once at application startup using
            <see cref="M:Ark.Api.Binance.BinanceApiClientManager.Configure(Microsoft.Extensions.Options.IOptions{Ark.Api.Binance.BinanceOptions})"/>.
            </remarks>
            <example>
            <code>
            BinanceApiClientManager.Configure(options);
            var result = await BinanceApiClientManager.ExecuteAsync((c,t) => c.GetTickerAsync("BTCUSDT", t), "default", CancellationToken.None);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.Configure(Microsoft.Extensions.Options.IOptions{Ark.Api.Binance.BinanceOptions})">
            <summary>
            Configures the manager with options and logger.
            </summary>
            <param name="options">The Binance options.</param>
            <remarks>
            Must be called before any execution methods.
            </remarks>
            <example>
            <code>
            BinanceApiClientManager.Configure(myOptions);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.ExecuteAsync(System.Func{Ark.Api.Binance.BinanceApiClient,System.Threading.CancellationToken,System.Threading.Tasks.Task{Ark.Result}},System.String,System.Threading.CancellationToken)">
            <summary>
            Executes an operation on the <see cref="T:Ark.Api.Binance.BinanceApiClient"/> ensuring
            the client is alive and rate limits are respected.
            </summary>
            <param name="action">Delegate using the managed client.</param>
            <param name="limitKey">Identifier of the rate limiter to use.</param>
            <param name="token">Cancellation token.</param>
            <returns>The result returned by the delegate.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.ExecuteAsync``1(System.Func{Ark.Api.Binance.BinanceApiClient,System.Threading.CancellationToken,System.Threading.Tasks.Task{Ark.Result{``0}}},System.String,System.Threading.CancellationToken)">
            <summary>
            Executes an operation returning <see cref="T:Ark.Result`1"/> on the <see cref="T:Ark.Api.Binance.BinanceApiClient"/>.
            </summary>
            <param name="action">Delegate using the managed client.</param>
            <param name="limitKey">Identifier of the rate limiter.</param>
            <param name="token">Cancellation token.</param>
            <typeparam name="T">Type returned in the result.</typeparam>
            <returns>A <see cref="T:Ark.Result`1"/> from the delegate.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.GetRateLimitUsage(System.String)">
            <summary>
            Gets the current usage ratio of the specified rate limiter.
            </summary>
            <param name="limitKey">Identifier of the rate limiter.</param>
            <returns>A value between 0 and 1 representing the usage.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.IsApproachingLimit(System.String)">
            <summary>
            Determines if the specified limiter has crossed its alert threshold.
            </summary>
            <param name="limitKey">Identifier of the rate limiter.</param>
            <returns><c>true</c> when usage exceeds the alert threshold.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.IsBelowRecoveryLimit(System.String)">
            <summary>
            Determines if the specified limiter has recovered below its threshold.
            </summary>
            <param name="limitKey">Identifier of the rate limiter.</param>
            <returns><c>true</c> when usage is below the recovery threshold.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.AnalyzeBatch(System.Collections.Generic.IEnumerable{Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall})">
            <summary>
            Evaluates a batch of API calls against the configured limits.
            + Assists planning to avoid weight violations.
            - Uses static rules; server-side changes are not reflected automatically.
            </summary>
            <param name="calls">Planned API calls.</param>
            <returns>Total weight and whether the limit would be exceeded.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.EnsureAliveAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API and recreates the client if unreachable.
            </summary>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:Ark.Api.Binance.BinanceApiClientManager.RestartClient">
            <summary>
            Recreates the internal <see cref="T:Ark.Api.Binance.BinanceApiClient"/> instance.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Controllers.FeeRulesController">
            <summary>
            Provides fee rule endpoints for Binance symbols.
            + Exposes helper operations to inspect and simulate fees before trading.
            - Does not persist user-specific overrides; configuration remains in memory.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#commission-rate-data"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.FeeRulesController.#ctor(Ark.Api.Binance.Services.FeeRulesService,Ark.Api.Binance.Services.FeeCalculationService)">
            <summary>
            Initializes a new instance of the controller.
            </summary>
            <param name="feeRulesService">Service accessing fee rules.</param>
            <param name="feeCalculationService">Service calculating fees.</param>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.FeeRulesController.GetFeeRules(System.String)">
            <summary>
            Gets fee rules for a symbol.
            + Returns maker, taker and funding rates.
            - Values may be outdated if Binance updates their schedule.
            </summary>
            <param name="symbol">Trading symbol such as "BTCUSDT".</param>
            <returns>Fee rule details in JSON format.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.FeeRulesController.OptimizeClick(System.String,Ark.Api.Binance.OptimizeClickRequest)">
            <summary>
            Calculates optimal click amount for a symbol.
            + Evaluates trade size needed to reach a target profit percentage.
            - Ignores slippage and funding rate variance.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="request">Optimization parameters.</param>
            <returns>Optimal click result.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.FeeRulesController.ValidateProfitability(System.String,Ark.Api.Binance.ValidateProfitabilityRequest)">
            <summary>
            Validates profitability for trade parameters.
            + Confirms that projected profit covers exchange fees.
            - Assumes fee rules remain constant during trade lifetime.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <param name="request">Profitability validation request.</param>
            <returns>Whether the trade is profitable.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Controllers.MarginController">
            <summary>
            Provides endpoints for Binance margin requirement projections.
            + Allows estimating required margin before placing an order.
            - Does not validate against account state or execute trades.
            </summary>
            <remarks>
            Reference: https://binance-docs.github.io/apidocs/futures/en/#position-margin
            </remarks>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.MarginController.#ctor(Ark.Api.Binance.Services.FeeCalculationService)">
            <summary>
            Creates a new instance of the controller.
            </summary>
            <param name="feeService">Service used for fee calculations.</param>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.MarginController.Project(Ark.Api.Binance.Dto.MarginRequirementRequest)">
            <summary>
            Projects the margin requirements for a potential position.
            + Helps preview initial and maintenance margin usage.
            - Assumes isolated margin; cross‑position exposure is ignored.
            </summary>
            <param name="request">Projection inputs including symbol, quantity, price and leverage.</param>
            <returns>Estimated margin requirements.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Controllers.RateLimitRulesController">
            <summary>
            Exposes endpoints to manage rate limit rules.
            + Allows runtime tuning of request weight and order limits.
            - Changes are not persisted beyond process restart.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#limit-information"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.RateLimitRulesController.#ctor(Ark.Api.Binance.Services.RateLimitRulesService)">
            <summary>
            Creates the controller.
            </summary>
            <param name="service">Rate limit rule service.</param>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.RateLimitRulesController.GetRateLimitRules">
            <summary>
            Gets current rate limit rules.
            + Useful for monitoring consumption thresholds.
            - Provides raw values without usage statistics.
            </summary>
            <returns>Current configuration.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.RateLimitRulesController.UpdateRateLimitRules(Ark.Api.Binance.UpdateRateLimitsRequest)">
            <summary>
            Updates rate limit rules.
            + Immediately applies new weight and order limits.
            - No validation beyond basic range checks in <see cref="T:Ark.Api.Binance.Services.RateLimitRulesService"/>.
            </summary>
            <param name="request">New rule values.</param>
            <returns>Confirmation of update.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Controllers.RateLimitSimulationController">
            <summary>
            Exposes rate limit simulation utilities.
            + Predicts consumption before issuing real requests.
            - Works from provided assumptions; live limits may differ.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.RateLimitSimulationController.#ctor(Ark.Api.Binance.Services.RateLimitSimulationService)">
            <summary>
            Initializes the controller.
            </summary>
            <param name="service">Simulation service instance.</param>
        </member>
        <member name="M:Ark.Api.Binance.Controllers.RateLimitSimulationController.Simulate(Ark.Api.Binance.RateLimitSimulationRequestDto)">
            <summary>
            Simulates weight and order rate usage for planned calls.
            + Helps plan batch operations without hitting limits.
            - Does not execute any remote requests or validate authentication.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.BinanceSessionManagerCache">
            <summary>
            Manages multiple <see cref="T:Ark.Api.Binance.BinanceSession"/> instances.
            </summary>
            <remarks>
            Sessions are stored in-memory and identified by a <see cref="T:System.Guid"/>.
            </remarks>
            <example>
            <code>
            var id = BinanceSessionManager.CreateSession(options, logger);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionManagerCache.CreateSession(Ark.Api.Binance.BinanceOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new Binance client session with the given options.
            </summary>
            <param name="options">Binance connection options.</param>
            <param name="logger">Logger used by the session.</param>
            <returns>The identifier of the created session.</returns>
            <example>
            <code>
            var id = BinanceSessionManager.CreateSession(options, logger);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionManagerCache.TryGetSession(System.Guid,Ark.Api.Binance.BinanceSession@)">
            <summary>
            Tries to get an existing session.
            </summary>
            <param name="id">Session identifier.</param>
            <param name="session">The retrieved session when found.</param>
            <returns><c>true</c> if the session exists.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionManagerCache.RemoveSession(System.Guid)">
            <summary>
            Removes a session from the manager.
            </summary>
            <param name="id">Identifier of the session to remove.</param>
            <returns><c>true</c> if the session was removed.</returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionManagerCache.GetSessionIds">
            <summary>
            Returns the active session identifiers.
            </summary>
            <returns>A collection of session ids.</returns>
        </member>
        <member name="T:Ark.Api.Binance.BinanceDbContext">
            <summary>
            Entity Framework context for Binance related entities.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceDbContext.FeeRules">
            <summary>Database table for fee rules.</summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceDbContext.RateLimitRules">
            <summary>Database table for rate limit rules.</summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceDbContext.LatencyMeasurements">
            <summary>Database table for latency measurements.</summary>
        </member>
        <member name="T:Ark.Api.Binance.BinanceSessionDbEntity">
            <summary>
            Database entity storing Binance session information.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Id">
            <summary>
            Identifier of the session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Created">
            <summary>
            UTC creation time of the session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.OptionsJson">
            <summary>
            JSON serialized options used to create the session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Orders">
            <summary>Orders associated with this session.</summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Positions">
            <summary>Open positions tracked for this session.</summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Tickers">
            <summary>Ticker snapshots recorded during the session.</summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Trades">
            <summary>Trade history captured for the session.</summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSessionDbEntity.Incomes">
            <summary>Income records linked to the session.</summary>
        </member>
        <member name="T:Ark.Api.Binance.FeeRulesDbEntity">
            <summary>
            Stores fee configuration for a Binance futures symbol.
            + Enables quick lookup of maker/taker rates by VIP level.
            - Values may become outdated without periodic refresh.
            Ref: <see href="https://www.binance.com/en/fee/futures"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.Id">
            <summary>
            Surrogate identifier.
            + Stable primary key for ORM usage.
            - Not exposed by Binance APIs.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.Symbol">
            <summary>
            Futures symbol the rules apply to.
            + Acts as natural key.
            - Case-sensitive according to Binance conventions.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.MakerFeeVip0">
            <summary>
            Maker fee for VIP0 level expressed as a decimal rate.
            + Allows precise storage up to 8 decimals.
            - Must be synchronized with Binance fee schedule.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.TakerFeeVip0">
            <summary>
            Taker fee for VIP0 level expressed as a decimal rate.
            + Supports high precision values.
            - May not reflect temporary promotions.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.VipRatesJson">
            <summary>
            Serialized VIP fee rates in JSON format.
            + Flexibly stores per-level maker/taker fees.
            - Requires JSON parsing on usage.
            Example:
            <code>{"vip1":{"maker":0.00016,"taker":0.0004}}</code>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.LiquidationFeeRate">
            <summary>
            Liquidation fee rate applied by the exchange.
            + Useful for risk calculations.
            - Subject to exchange policy changes.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.CurrentFundingRate">
            <summary>
            Current funding rate estimate.
            + Helps project holding costs.
            - Only an estimate; actual rate may vary.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.NextFundingTime">
            <summary>
            Next scheduled funding time in UTC.
            + Indicates when funding rate will apply.
            - Value becomes stale after funding occurs.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.BnbDiscountEnabled">
            <summary>
            Indicates if BNB discount is applied.
            + Allows fee reduction using BNB holdings.
            - Requires sufficient BNB balance to take effect.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.LastUpdated">
            <summary>
            Timestamp of the last update in UTC.
            + Aids auditing of fee changes.
            - Must be kept in sync with actual update operations.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.UpdatedBy">
            <summary>
            User or system that updated the record.
            + Helps trace configuration changes.
            - Free-form string; consider standardizing values.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.AdvancedRulesJson">
            <summary>
            Additional advanced rules in JSON format.
            + Extensible without schema changes.
            - Consumers must validate structure.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDbEntity.IsActive">
            <summary>
            Flag indicating whether the rule set is active.
            + Inactive rows can remain for auditing.
            - Consumers must filter inactive entries.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.IncomeDbEntity">
            <summary>
            Records income history from Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Id">
            <summary>
            Primary key of the income entry.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.SessionId">
            <summary>
            Identifier of the related session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Symbol">
            <summary>
            Symbol this income relates to.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Time">
            <summary>
            Time of the income event.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.IncomeType">
            <summary>
            Type of income.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Amount">
            <summary>
            Raw amount received.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Fee">
            <summary>
            Fee deducted from the income.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.NetIncome">
            <summary>
            Net income after fees.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Status">
            <summary>
            Status returned by Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeDbEntity.Session">
            <summary>Navigation to the related session.</summary>
        </member>
        <member name="T:Ark.Api.Binance.LatencyMeasurementDbEntity">
            <summary>
            Records latency measurements for Binance API calls.
            + Helps analyse network and processing delays.
            - Can grow quickly; purge old data regularly.
            Ref: <see href="https://learn.microsoft.com/ef/core/modeling/indexes"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.Id">
            <summary>
            Surrogate identifier for the measurement.
            + Supports efficient lookups.
            - Not meaningful outside the database.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.Endpoint">
            <summary>
            Endpoint being measured (e.g., REST path).
            + Enables grouping metrics by operation.
            - Free-form; inconsistent naming hampers aggregation.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.RequestType">
            <summary>
            HTTP method or request type.
            + Useful to differentiate same endpoint by verb.
            - Optional; empty value reduces context.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.RequestStartTime">
            <summary>
            Timestamp when request was sent.
            + Allows calculation of total latency.
            - Caller must supply a UTC value.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.ResponseReceivedTime">
            <summary>
            Timestamp when response was received.
            + Used with <see cref="P:Ark.Api.Binance.LatencyMeasurementDbEntity.RequestStartTime"/> to compute total latency.
            - Caller must ensure consistent clock.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.BinanceTimestamp">
            <summary>
            Server timestamp provided by Binance, if available.
            + Helps detect clock drift.
            - May be null when not returned.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.TotalLatencyMs">
            <summary>
            Total latency in milliseconds.
            + Sum of network and processing latencies.
            - Negative values are invalid.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.NetworkLatencyMs">
            <summary>
            Network portion of latency in milliseconds.
            + Useful for connectivity diagnostics.
            - Requires client-side measurement logic.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.ProcessingLatencyMs">
            <summary>
            Processing time on the server in milliseconds.
            + Helps pinpoint backend bottlenecks.
            - Estimated value, not exact.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.IsSuccessful">
            <summary>
            Indicates whether the call succeeded.
            + Allows filtering successful versus failed calls.
            - False does not imply retry behaviour.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.ErrorCode">
            <summary>
            Optional error code returned by Binance.
            + Enables quick failure categorization.
            - Empty when call succeeds.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.MeasuredAt">
            <summary>
            Timestamp when the measurement was recorded in UTC.
            + Useful for time-based queries.
            - Automatically set to current time by default.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LatencyMeasurementDbEntity.AdditionalDataJson">
            <summary>
            Additional context serialized as JSON.
            + Allows storing request metadata.
            - Consumers must validate JSON content.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.OrderDbEntity">
            <summary>
            Represents an order recorded from Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.OrderId">
            <summary>
            Identifier assigned by Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.SessionId">
            <summary>
            Identifier of the related session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Symbol">
            <summary>
            Trading symbol.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Side">
            <summary>
            Order side (Buy/Sell).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Type">
            <summary>
            Order type (Market, Limit...).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Quantity">
            <summary>
            Quantity traded.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Price">
            <summary>
            Price when applicable.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.StopPrice">
            <summary>
            Stop price when applicable.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.TimeInForce">
            <summary>
            Time in force policy.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.ReduceOnly">
            <summary>
            Indicates if the order reduces a position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.PositionSide">
            <summary>
            Position side of the order.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.ClientOrderId">
            <summary>
            Optional client order identifier.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Status">
            <summary>
            Order status returned by Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Timestamp">
            <summary>
            Timestamp provided by Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderDbEntity.Session">
            <summary>Associated session.</summary>
        </member>
        <member name="T:Ark.Api.Binance.PositionDbEntity">
            <summary>
            Represents an open position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Id">
            <summary>
            Primary key of the position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.SessionId">
            <summary>
            Identifier of the related session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Symbol">
            <summary>
            Trading symbol.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Side">
            <summary>
            Position side.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Quantity">
            <summary>
            Quantity of the position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.EntryPrice">
            <summary>
            Entry price for the position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.MarkPrice">
            <summary>
            Current mark price.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.UnrealizedPnl">
            <summary>
            Unrealized profit or loss.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Leverage">
            <summary>
            Leverage used.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Timestamp">
            <summary>
            Timestamp of the data.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDbEntity.Session">
            <summary>Owning session.</summary>
        </member>
        <member name="T:Ark.Api.Binance.RateLimitRulesDbEntity">
            <summary>
            Represents Binance request rate limit thresholds for an endpoint category.
            + Enables proactive throttling based on exchange quotas.
            - Requires manual updates when Binance revises limits.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#limits"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.Id">
            <summary>
            Surrogate identifier.
            + Simplifies database joins.
            - Not part of Binance specifications.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.EndpointCategory">
            <summary>
            Endpoint category these limits apply to.
            + Acts as natural key.
            - Free-form value; ensure consistency with client categories.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.WeightLimitPerMinute">
            <summary>
            Weight limit allowed per minute.
            + Used to control general request weight.
            - May vary across Binance deployments.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.OrderLimitPerMinute">
            <summary>
            Order count limit per minute.
            + Prevents order bursts.
            - Assumes standard account tier.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.OrderLimitPer10Seconds">
            <summary>
            Order count limit for any 10 second window.
            + Shields from short spikes.
            - May be more restrictive during volatility.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.RequestWeight">
            <summary>
            Request weight of the endpoint.
            + Multiplies against global weight limits.
            - Zero or negative values produce invalid calculations.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.AlertThreshold">
            <summary>
            Usage ratio at which alerts should be raised.
            + Allows early warning before limits are hit.
            - Too low values may generate noisy alerts.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.RecoveryThreshold">
            <summary>
            Ratio under which the system considers usage recovered.
            + Enables automatic resumption of requests.
            - Misconfiguration may resume too early.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.CreatedAt">
            <summary>
            Creation timestamp in UTC.
            + Useful for auditing rule changes.
            - Not automatically updated on modifications.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.UpdatedAt">
            <summary>
            Last update timestamp in UTC.
            + Reflects the most recent configuration change.
            - Must be set by the caller when updating.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDbEntity.IsActive">
            <summary>
            Indicates if the rule set is currently enforced.
            + Allows temporary deactivation without deleting.
            - Consumers must check this flag before use.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.TickerDbEntity">
            <summary>
            Captures ticker information.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.Id">
            <summary>
            Primary key of the ticker entry.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.SessionId">
            <summary>
            Identifier of the related session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.Symbol">
            <summary>
            Trading symbol.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.Price">
            <summary>
            Last traded price.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.Timestamp">
            <summary>
            Timestamp of the ticker.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDbEntity.Session">
            <summary>Session owning this ticker snapshot.</summary>
        </member>
        <member name="T:Ark.Api.Binance.TradeDbEntity">
            <summary>
            Represents a trade history entry.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Id">
            <summary>
            Unique trade identifier.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.SessionId">
            <summary>
            Identifier of the related session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Symbol">
            <summary>
            Symbol traded.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Side">
            <summary>
            Direction of the trade.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Quantity">
            <summary>
            Executed quantity.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Price">
            <summary>
            Executed price.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Fee">
            <summary>
            Commission paid.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.RealizedPnl">
            <summary>
            Profit or loss realized.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Leverage">
            <summary>
            Leverage used for the trade.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.CloseType">
            <summary>
            Indicates how the trade was closed.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Timestamp">
            <summary>
            Trade timestamp.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Status">
            <summary>
            Status returned by Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeDbEntity.Session">
            <summary>Session associated with this trade.</summary>
        </member>
        <member name="T:Ark.Api.Binance.BinanceEntityDbServices`1">
            <summary>
            Base services used to persist Binance related entities.
            </summary>
            <typeparam name="TEntity">The entity type managed by these services.</typeparam>
        </member>
        <member name="P:Ark.Api.Binance.BinanceEntityDbServices`1.Logger">
            <summary>Logger used when database operations fail.</summary>
        </member>
        <member name="M:Ark.Api.Binance.BinanceEntityDbServices`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.BinanceEntityDbServices`1"/> class.
            </summary>
            <param name="connectionString">Connection string to the SQL Server database.</param>
        </member>
        <member name="T:Ark.Api.Binance.BinanceSessionDbServices">
            <summary>
            Repository used to persist Binance sessions.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.BinanceSessionDbServices"/> instance.
            </summary>
            <param name="connectionString">The SQL Server connection string to connect the database.</param>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionDbServices.InsertAsync(Ark.Api.Binance.BinanceSessionDbEntity)">
            <summary>
            Inserts a Binance session.
            </summary>
            <param name="session">The session to persist.</param>
            <returns>
            Success : The session has been persisted.
            Unexpected : An unexpected error occurs.
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionDbServices.GetAsync(System.String,Ark.TimeWindow)">
            <summary>
            Retrieves sessions for an owner within a time window.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionDbServices.DeleteAsync(System.String,Ark.TimeWindow)">
            <summary>
            Deletes sessions for an owner within a time window.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSessionDbServices.GetByIdWithDetailsAsync(System.Guid)">
            <summary>
            Retrieves a session with its related data.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.FeeRulesDbServices">
            <summary>
            Repository used to manage persisted fee rules.
            + Provides simple upsert and lookup helpers.
            - Assumes symbols are unique per record.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.FeeRulesDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.FeeRulesDbServices"/> instance.
            + Connection string is passed directly.
            - Caller must ensure the string targets a valid SQL Server.
            </summary>
            <param name="connectionString">SQL Server connection string.</param>
        </member>
        <member name="M:Ark.Api.Binance.FeeRulesDbServices.UpsertAsync(Ark.Api.Binance.FeeRulesDbEntity)">
            <summary>
            Inserts or updates a fee rule using an UPSERT operation.
            + Avoids duplicates when the symbol already exists.
            - Last write wins without concurrency checks.
            </summary>
            <param name="entity">The fee rule to persist.</param>
        </member>
        <member name="M:Ark.Api.Binance.FeeRulesDbServices.FindAsync(System.String)">
            <summary>
            Finds a fee rule by symbol.
            + Returns <see cref="F:Ark.ResultStatus.NotFound"/> when no entry exists.
            - Symbol comparison is case-sensitive.
            </summary>
            <param name="symbol">The futures symbol to search for.</param>
        </member>
        <member name="M:Ark.Api.Binance.FeeRulesDbServices.DeleteAsync(System.String)">
            <summary>
            Deletes the fee rule for a given symbol.
            + Removes stale configuration from the database.
            - Operation is irreversible.
            </summary>
            <param name="symbol">The symbol whose fee rule should be removed.</param>
        </member>
        <member name="T:Ark.Api.Binance.IncomeDbServices">
            <summary>
            Repository used to persist Binance income history entries.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.IncomeDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.IncomeDbServices"/> instance.
            </summary>
            <param name="connectionString">The SQL Server connection string to connect the database.</param>
        </member>
        <member name="M:Ark.Api.Binance.IncomeDbServices.InsertAsync(System.Collections.Generic.IEnumerable{Ark.Api.Binance.IncomeDbEntity})">
            <summary>
            Inserts income history entries.
            </summary>
            <param name="incomes">The income history entries to persist.</param>
            <returns>
            Success : The incomes have been persisted.
            Unexpected : An unexpected error occurs.
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.IncomeDbServices.GetAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Retrieves incomes matching the criteria.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.IncomeDbServices.DeleteAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Deletes incomes matching the criteria.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.LatencyMeasurementDbServices">
            <summary>
            Repository used to persist latency measurements.
            + Supports batch inserts and time-window queries.
            - Large datasets may require external pruning.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.LatencyMeasurementDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.LatencyMeasurementDbServices"/> instance.
            + Connection string passed directly for flexibility.
            - Caller must ensure database availability.
            </summary>
            <param name="connectionString">SQL Server connection string.</param>
        </member>
        <member name="M:Ark.Api.Binance.LatencyMeasurementDbServices.InsertAsync(System.Collections.Generic.IEnumerable{Ark.Api.Binance.LatencyMeasurementDbEntity})">
            <summary>
            Inserts latency measurements in batch.
            + Minimizes round-trips using a single transaction.
            - Does not deduplicate entries.
            </summary>
            <param name="measurements">The measurements to persist.</param>
        </member>
        <member name="M:Ark.Api.Binance.LatencyMeasurementDbServices.GetAsync(System.String,Ark.TimeWindow)">
            <summary>
            Retrieves measurements for an endpoint within a time window.
            + Useful for analytics dashboards.
            - Endpoint comparison is case-sensitive.
            </summary>
            <param name="endpoint">The endpoint to filter on.</param>
            <param name="window">The time window bounding the search.</param>
        </member>
        <member name="M:Ark.Api.Binance.LatencyMeasurementDbServices.DeleteAsync(System.String,Ark.TimeWindow)">
            <summary>
            Deletes measurements matching the criteria.
            + Keeps the dataset size manageable.
            - Operation is irreversible.
            </summary>
            <param name="endpoint">The endpoint to filter on.</param>
            <param name="window">The time window of measurements to delete.</param>
        </member>
        <member name="T:Ark.Api.Binance.OrderDbServices">
            <summary>
            Repository used to persist Binance orders.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.OrderDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.OrderDbServices"/> instance.
            </summary>
            <param name="connectionString">The SQL Server connection string to connect the database.</param>
        </member>
        <member name="M:Ark.Api.Binance.OrderDbServices.InsertAsync(System.Collections.Generic.IEnumerable{Ark.Api.Binance.OrderDbEntity})">
            <summary>
            Inserts orders.
            </summary>
            <param name="orders">The orders to persist.</param>
            <returns>
            Success : The orders have been persisted.
            Unexpected : An unexpected error occurs.
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.OrderDbServices.GetAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Retrieves orders matching the criteria.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.OrderDbServices.DeleteAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Deletes orders matching the criteria.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.PositionDbServices">
            <summary>
            Repository used to persist Binance position entries.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.PositionDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.PositionDbServices"/> instance.
            </summary>
            <param name="connectionString">The SQL Server connection string to connect the database.</param>
        </member>
        <member name="M:Ark.Api.Binance.PositionDbServices.InsertAsync(System.Collections.Generic.IEnumerable{Ark.Api.Binance.PositionDbEntity})">
            <summary>
            Inserts position entries.
            </summary>
            <param name="positions">The positions to persist.</param>
            <returns>
            Success : The positions have been persisted.
            Unexpected : An unexpected error occurs.
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.PositionDbServices.GetAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Retrieves positions matching the criteria.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.PositionDbServices.DeleteAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Deletes positions matching the criteria.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.RateLimitRulesDbServices">
            <summary>
            Repository used to manage rate limit rules.
            + Centralizes endpoint quota information.
            - Does not enforce limits by itself.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.RateLimitRulesDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.RateLimitRulesDbServices"/> instance.
            + Connection string is provided directly.
            - Caller must validate the connection string.
            </summary>
            <param name="connectionString">SQL Server connection string.</param>
        </member>
        <member name="M:Ark.Api.Binance.RateLimitRulesDbServices.UpsertAsync(Ark.Api.Binance.RateLimitRulesDbEntity)">
            <summary>
            Inserts or updates a rate limit rule.
            + Uses UPSERT semantics to avoid duplicates.
            - Last write wins without conflict detection.
            </summary>
            <param name="entity">The rate limit rule to persist.</param>
        </member>
        <member name="M:Ark.Api.Binance.RateLimitRulesDbServices.FindAsync(System.String)">
            <summary>
            Finds a rate limit rule by endpoint category.
            + Returns <see cref="F:Ark.ResultStatus.NotFound"/> when the rule is missing.
            - Endpoint category comparison is case-sensitive.
            </summary>
            <param name="endpointCategory">The endpoint category to search for.</param>
        </member>
        <member name="M:Ark.Api.Binance.RateLimitRulesDbServices.DeleteAsync(System.String)">
            <summary>
            Deletes a rate limit rule by endpoint category.
            + Cleans obsolete quota information.
            - Deletion cannot be undone.
            </summary>
            <param name="endpointCategory">The endpoint category whose rule should be removed.</param>
        </member>
        <member name="T:Ark.Api.Binance.TickerDbServices">
            <summary>
            Repository used to persist Binance ticker information.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.TickerDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.TickerDbServices"/> instance.
            </summary>
            <param name="connectionString">The SQL Server connection string to connect the database.</param>
        </member>
        <member name="M:Ark.Api.Binance.TickerDbServices.InsertAsync(System.Collections.Generic.IEnumerable{Ark.Api.Binance.TickerDbEntity})">
            <summary>
            Inserts ticker entries.
            </summary>
            <param name="tickers">The ticker entries to persist.</param>
            <returns>
            Success : The tickers have been persisted.
            Unexpected : An unexpected error occurs.
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.TickerDbServices.GetAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Retrieves tickers matching the criteria.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.TickerDbServices.DeleteAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Deletes tickers matching the criteria.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.TradeDbServices">
            <summary>
            Repository used to persist Binance trade history entries.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.TradeDbServices.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.TradeDbServices"/> instance.
            </summary>
            <param name="connectionString">The SQL Server connection string to connect the database.</param>
        </member>
        <member name="M:Ark.Api.Binance.TradeDbServices.InsertAsync(System.Collections.Generic.IEnumerable{Ark.Api.Binance.TradeDbEntity})">
            <summary>
            Inserts trade history entries.
            </summary>
            <param name="trades">The trades to persist.</param>
            <returns>
            Success : The trades have been persisted.
            Unexpected : An unexpected error occurs.
            </returns>
        </member>
        <member name="M:Ark.Api.Binance.TradeDbServices.GetAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Retrieves trades matching the criteria.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.TradeDbServices.DeleteAsync(System.Guid,Ark.TimeWindow)">
            <summary>
            Deletes trades matching the criteria.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.ClickOptimizationResultDto">
            <summary>
            Result returned after computing the optimal click amount.
            + Summarizes the quantity, fees and profit for a single trade iteration.
            - Estimates ignore slippage and sudden fee changes.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.ClickOptimizationResultDto.OptimalAmount">
            <summary>Optimal quantity to place.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ClickOptimizationResultDto.EstimatedTotalFees">
            <summary>Estimated total fees for the operation.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ClickOptimizationResultDto.EstimatedProfit">
            <summary>Estimated profit based on target.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ClickOptimizationResultDto.RequiredPriceMove">
            <summary>Required price movement.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ClickOptimizationResultDto.SafetyMarginUsed">
            <summary>Additional safety margin applied.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ClickOptimizationResultDto.FeeBreakdown">
            <summary>Breakdown of fees by category.</summary>
        </member>
        <member name="T:Ark.Api.Binance.FeeBreakdownDto">
            <summary>
            Detailed fee composition for a trade.
            + Provides visibility into entry, exit, funding and slippage costs.
            - Does not account for borrowing or interest charges.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeBreakdownDto.EntryFee">
            <summary>Fee paid when entering the position.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeBreakdownDto.ExitFee">
            <summary>Fee paid when exiting the position.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeBreakdownDto.FundingFee">
            <summary>Estimated funding fee.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeBreakdownDto.SlippageEstimate">
            <summary>Approximate slippage cost.</summary>
        </member>
        <member name="T:Ark.Api.Binance.FeeRulesDto">
            <summary>
            Represents persisted fee rule settings.
            + Stores maker, taker and funding rates for reuse.
            - Values may become stale if not refreshed from the exchange.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDto.MakerFee">
            <summary>Maker fee rate.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDto.TakerFee">
            <summary>Taker fee rate.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FeeRulesDto.FundingRate">
            <summary>Current funding rate.</summary>
        </member>
        <member name="T:Ark.Api.Binance.FuturesBalanceDto">
            <summary>
            Represents the available balance for a futures quote asset and transfer limits.
            + Indicates transferable amounts and remaining quotas.
            - Does not include margin or isolated wallet balances.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesBalanceDto.Asset">
            <summary>Asset ticker (USDT or USDC).</summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesBalanceDto.Available">
            <summary>Amount currently available for trading.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesBalanceDto.MaxTransfer">
            <summary>Maximum amount that can be transferred at once when known.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesBalanceDto.TransfersRemaining">
            <summary>Remaining transfers allowed in the next hour if limited.</summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesBalanceDto.Timestamp">
            <summary>Timestamp of the balance retrieval.</summary>
        </member>
        <member name="T:Ark.Api.Binance.IncomeSummaryDto">
            <summary>
            Summarizes futures income including fees and profit.
            + Aggregates raw amounts and net totals for analysis.
            - Does not convert values to a common quote asset.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.Symbol">
            <summary>
            Symbol this income entry relates to.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.Time">
            <summary>
            Time of the income event.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.IncomeType">
            <summary>
            Type of income (commission, realized PnL, funding fee, etc.).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.Amount">
            <summary>
            Raw amount received from Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.Fee">
            <summary>
            Fee associated with this income entry. Negative values indicate a loss.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.NetIncome">
            <summary>
            Net income after fees (can be negative for a loss).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.IncomeSummaryDto.Status">
            <summary>
            Status returned by Binance for this income entry.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.MarginRequirementDto">
            <summary>
            Represents projected margin requirements for a potential futures position.
            + Provides initial and maintenance margin estimates.
            - Values are approximations until aligned with symbol-specific rules.
            Ref: <see href="https://www.binance.com/en/support/faq/360033162192"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.MarginRequirementDto.InitialMargin">
            <summary>
            Estimated initial margin in quote asset (e.g. USDT).
            + Calculated from notional value divided by leverage.
            - Does not include fee or slippage adjustments.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.MarginRequirementDto.MaintenanceMargin">
            <summary>
            Estimated maintenance margin in quote asset.
            + Baseline threshold before liquidation.
            - Placeholder rate pending full rule integration.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Dto.MarginRequirementRequest">
            <summary>
            Request to project margin requirements for a prospective trade.
            + Supplies trade parameters for projection.
            - Does not validate symbol-specific leverage caps.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Dto.MarginRequirementRequest.Symbol">
            <summary>
            Futures contract symbol.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Dto.MarginRequirementRequest.Quantity">
            <summary>
            Number of contracts to open.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Dto.MarginRequirementRequest.Price">
            <summary>
            Entry price in quote asset.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Dto.MarginRequirementRequest.Leverage">
            <summary>
            Applied leverage multiplier.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.OptimizeClickRequest">
            <summary>
            Request payload to compute the optimal click amount for a given symbol.
            + Includes current price, desired profit and leverage configuration.
            - Does not account for symbol filters or precision limits.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OptimizeClickRequest.CurrentPrice">
            <summary>Current market price.</summary>
        </member>
        <member name="P:Ark.Api.Binance.OptimizeClickRequest.TargetProfitPct">
            <summary>Target profit percentage (e.g. 0.1 for 0.1%).</summary>
        </member>
        <member name="P:Ark.Api.Binance.OptimizeClickRequest.Leverage">
            <summary>Leverage applied to the position.</summary>
        </member>
        <member name="P:Ark.Api.Binance.OptimizeClickRequest.IsLong">
            <summary>True when the position is long, false for short.</summary>
        </member>
        <member name="P:Ark.Api.Binance.OptimizeClickRequest.VipLevel">
            <summary>Binance VIP level (0-9).</summary>
        </member>
        <member name="P:Ark.Api.Binance.OptimizeClickRequest.UseBnbDiscount">
            <summary>Use BNB for fee discounts.</summary>
        </member>
        <member name="T:Ark.Api.Binance.OrderResultDto">
            <summary>
            Result returned by Binance when placing or modifying a futures order.
            Contains the original order details with additional information from Binance.
            + Provides identifiers and status needed for follow-up operations.
            - Mirrors Binance responses; schema changes may require updates.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderResultDto.OrderId">
            <summary>
            Identifier assigned by Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderResultDto.Timestamp">
            <summary>
            Time the order was recorded by Binance (UTC).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.OrderResultDto.Status">
            <summary>
            Status returned by Binance for this order.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.PositionDto">
            <summary>
            Represents an open futures position.
            + Encapsulates symbol, side and valuation metrics.
            - Does not include margin or liquidation details.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.Symbol">
            <summary>Trading symbol.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.Side">
            <summary>Position side.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.Quantity">
            <summary>Quantity of the position.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.EntryPrice">
            <summary>Entry price.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.MarkPrice">
            <summary>Current mark price.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.UnrealizedPnl">
            <summary>Unrealized profit or loss.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.Leverage">
            <summary>Leverage used.</summary>
        </member>
        <member name="P:Ark.Api.Binance.PositionDto.Timestamp">
            <summary>Timestamp of the data.</summary>
        </member>
        <member name="T:Ark.Api.Binance.RateLimitRulesDto">
            <summary>
            Represents rate limit configuration settings.
            + Defines thresholds used by rate limiters and alerting.
            - Does not track real-time consumption metrics.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDto.WeightLimit">
            <summary>Maximum request weight per minute.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDto.OrderLimit">
            <summary>Maximum orders per minute.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDto.AlertThreshold">
            <summary>Usage percentage triggering alerts.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitRulesDto.RecoveryThreshold">
            <summary>Usage percentage at which normal operation resumes.</summary>
        </member>
        <member name="T:Ark.Api.Binance.RateLimitSimulationRequestDto">
            <summary>
            Request payload for simulating Binance rate limit consumption.
            + Provides timed API calls and order batch parameters.
            - Assumes limits are constant and does not verify authentication.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationRequestDto.TimedCalls">
            <summary>Timed API calls to evaluate.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationRequestDto.OrderCount">
            <summary>Number of orders to place in the batch.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationRequestDto.BatchDurationSec">
            <summary>Total duration in seconds for sending the orders.</summary>
        </member>
        <member name="T:Ark.Api.Binance.RateLimitSimulationResponseDto">
            <summary>
            Result of a rate limit simulation.
            + Summarises weight usage and order rate checks.
            - Provides estimates only; real execution may differ.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationResponseDto.TotalWeight">
            <summary>Total weight consumed by the batch.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationResponseDto.WeightLimitExceeded">
            <summary>True if the minute weight limit is exceeded.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationResponseDto.BurstViolation">
            <summary>True if any 60s window exceeds the weight limit.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationResponseDto.OrderRateMessage">
            <summary>Message describing order rate safety or violation.</summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitSimulationResponseDto.SuggestedDelayMs">
            <summary>Suggested delay in milliseconds between orders.</summary>
        </member>
        <member name="T:Ark.Api.Binance.RateLimitUsageDto">
            <summary>
            Represents rate limiter usage information.
            + Exposes current usage ratio and thresholds.
            - Does not persist historical consumption.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitUsageDto.Usage">
            <summary>
            Ratio of consumed requests (0 to 1).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitUsageDto.Approaching">
            <summary>
            Indicates whether the alert threshold has been exceeded.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitUsageDto.AlertThreshold">
            <summary>
            Usage percentage that triggers alert signalling.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.RateLimitUsageDto.RecoveryThreshold">
            <summary>
            Usage percentage required before normal operation resumes.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.SessionOverviewDto">
            <summary>
            Aggregated session data including orders, positions and ticker history.
            + Provides a single snapshot of session state for diagnostics.
            - Potentially heavy object; avoid returning for frequent polling.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.Orders">
            <summary>Open orders related to the session.</summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.Positions">
            <summary>Open positions for the session.</summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.Tickers">
            <summary>
            Historical tickers keyed by trading symbol.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.Balances">
            <summary>
            Available futures balances for the session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.IncomeSummaries">
            <summary>
            Income summaries recorded for the session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.FuturesTradingAvailable">
            <summary>
            Total stablecoins currently available for futures trading.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.SessionOverviewDto.Environment">
            <summary>
            Environment used when the session was created.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.TickerDto">
            <summary>
            Simple ticker information.
            + Captures last price and volume for quick lookups.
            - Does not include order book depth or best bid/ask.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDto.Symbol">
            <summary>Trading symbol.</summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDto.Price">
            <summary>Last traded price.</summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDto.Volume">
            <summary>Trade volume in base asset.</summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerDto.Timestamp">
            <summary>Timestamp of the ticker.</summary>
        </member>
        <member name="T:Ark.Api.Binance.TradeHistoryDto">
            <summary>
            Represents a trade history entry.
            + Captures essential order execution details for auditing.
            - Omits link to containing session or related trades.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Id">
            <summary>
            Unique identifier of the trade.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Symbol">
            <summary>
            Symbol traded.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Side">
            <summary>
            Direction of the trade: "Buy" or "Sell".
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Quantity">
            <summary>
            Executed quantity.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Price">
            <summary>
            Executed price.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Fee">
            <summary>
            Commission paid for the trade.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.RealizedPnl">
            <summary>
            Profit and loss realized on this trade.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Leverage">
            <summary>
            Leverage used for the position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.CloseType">
            <summary>
            Indicates how the trade was closed (liquidation, market, limit...).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Timestamp">
            <summary>
            Trade timestamp.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TradeHistoryDto.Status">
            <summary>
            Status returned by Binance for this trade.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.AccountHelper">
            <summary>
            Utility operations targeting account settings.
            + Exposes helpers for leverage and margin adjustments.
            - Relies on a configured <see cref="T:Ark.Api.Binance.BinanceSession"/> instance.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#change-initial-leverage-trade"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.AccountHelper.ChangeLeverageAsync(Ark.Api.Binance.BinanceSession,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Changes the initial leverage for a symbol.
            + Calls Binance Futures API via <see cref="M:Ark.Api.Binance.BinanceApiClient.ChangeInitialLeverageAsync(System.String,System.Int32,System.Threading.CancellationToken)"/>.
            - Does not validate symbol format before sending.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#change-initial-leverage-trade"/>
            </summary>
            <param name="session">Active trading session.</param>
            <param name="symbol">Trading pair symbol, e.g. "ETHUSDT".</param>
            <param name="leverage">Desired leverage level in integer form.</param>
            <param name="token">Cancellation token for the operation.</param>
            <returns>
            A <see cref="T:Ark.Result"/> describing the API outcome.
            Example JSON:
            {
              "Status": "Success"
            }
            </returns>
        </member>
        <member name="T:Ark.Api.Binance.Helpers.CircuitBreaker">
            <summary>
            Standalone circuit breaker for protecting critical operations
            + Prevents cascading failures
            + Configurable failure thresholds and recovery timeouts
            + Thread-safe operation
            TODO: Add metrics export for monitoring
            TODO: Implement adaptive thresholds based on error patterns
            </summary>
        </member>
        <member name="E:Ark.Api.Binance.Helpers.CircuitBreaker.StateChanged">
            <summary>
            Fired when the circuit changes state.
            + Allows observers to react to open or close transitions.
            - Handlers execute on the calling thread.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.eventhandler"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.#ctor(System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new circuit breaker instance.
            </summary>
            <param name="failureThreshold">Number of consecutive failures before opening the circuit.</param>
            <param name="recoveryTimeout">Time to wait before allowing a half-open test.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreaker.State">
            <summary>
            Current state of the circuit.
            + Determines whether operations are permitted.
            - May change between calls without notification.
            Ref: <see cref="T:Ark.Api.Binance.Helpers.CircuitState"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreaker.FailureCount">
            <summary>
            Number of consecutive failures recorded.
            + Resets after a successful call.
            - High counts will open the circuit.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreaker.LastFailureTime">
            <summary>
            Timestamp of the last recorded failure.
            + Useful for monitoring repeated issues.
            - Accuracy depends on the system clock.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.datetime"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreaker.NextAttemptTime">
            <summary>
            Next permitted UTC time to retry after an open circuit.
            + Governs transition from <see cref="F:Ark.Api.Binance.Helpers.CircuitState.Open"/> to <see cref="F:Ark.Api.Binance.Helpers.CircuitState.HalfOpen"/>.
            - Requires synchronized clocks across nodes.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.datetime"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreaker.RecoveryTimeout">
            <summary>
            Duration to wait before attempting recovery after the circuit opens.
            + Configurable per instance.
            - Excessive values delay availability.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.timespan"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.CanExecute">
            <summary>
            Check if the circuit breaker allows execution
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Execute an operation through the circuit breaker
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.Execute``1(System.Func{``0})">
            <summary>
            Execute a synchronous operation through the circuit breaker
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.RecordSuccess">
            <summary>
            Record a successful operation
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.RecordFailure(System.Exception)">
            <summary>
            Record a failed operation
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.Reset">
            <summary>
            Manually reset the circuit breaker to closed state
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.GetStats">
            <summary>
            Get current circuit breaker statistics
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreaker.Dispose">
            <summary>
            Releases managed resources.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Helpers.CircuitState">
            <summary>
            Possible states for the <see cref="T:Ark.Api.Binance.Helpers.CircuitBreaker"/>.
            + Indicates whether execution is currently allowed.
            - Does not track failure counts or timings.
            Ref: <see href="https://learn.microsoft.com/dotnet/architecture/"/>
            </summary>
        </member>
        <member name="F:Ark.Api.Binance.Helpers.CircuitState.Closed">
            <summary>Normal operation – requests allowed</summary>
        </member>
        <member name="F:Ark.Api.Binance.Helpers.CircuitState.Open">
            <summary>Failure threshold exceeded – requests blocked</summary>
        </member>
        <member name="F:Ark.Api.Binance.Helpers.CircuitState.HalfOpen">
            <summary>Testing recovery – limited requests allowed</summary>
        </member>
        <member name="T:Ark.Api.Binance.Helpers.CircuitBreakerException">
            <summary>
            Exception thrown when the circuit breaker denies execution.
            + Contains a descriptive failure message.
            - Does not suggest recovery actions.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.exception"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreakerException.#ctor(System.String)">
            <summary>
            Create a new instance with a message.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitBreakerException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance with a message and inner exception.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Helpers.CircuitStateEventArgs">
            <summary>
            Event arguments describing a circuit breaker state change.
            + Exposes previous and new states for observers.
            - Timestamp uses UTC and depends on system clock.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.eventargs"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitStateEventArgs.OldState">
            <summary>
            State before the transition.
            + Useful for auditing changes.
            - Irrelevant if state did not change.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitStateEventArgs.NewState">
            <summary>
            State after the transition.
            + Indicates current circuit permission.
            - Might change again immediately after.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitStateEventArgs.Timestamp">
            <summary>
            UTC timestamp of the transition.
            + Helps correlate with logs.
            - Accuracy depends on system clock.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.datetime"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.CircuitStateEventArgs.#ctor(Ark.Api.Binance.Helpers.CircuitState,Ark.Api.Binance.Helpers.CircuitState)">
            <summary>
            Initializes event arguments with previous and new circuit states.
            </summary>
            <param name="oldState">State before transition.</param>
            <param name="newState">State after transition.</param>
        </member>
        <member name="T:Ark.Api.Binance.Helpers.CircuitBreakerStats">
            <summary>
            Snapshot of circuit breaker metrics for monitoring.
            + Provides insight into failure counts and timings.
            - Values may be stale if queried infrequently.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.State">
            <summary>
            Current circuit state.
            + Indicates whether execution is permitted.
            - Does not show history of previous states.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.FailureCount">
            <summary>
            Number of recent consecutive failures.
            + Helps evaluate stability.
            - Reset after success or manual reset.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.FailureThreshold">
            <summary>
            Configured failure threshold before opening.
            + Guides tuning of the breaker.
            - Static during runtime.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.LastFailureTime">
            <summary>
            UTC time of the most recent failure.
            + Enables monitoring of repeated issues.
            - May be DateTime.MinValue if none occurred.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.datetime"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.NextAttemptTime">
            <summary>
            Next UTC time when execution may be attempted again.
            + Controls transition from open to half-open.
            - Requires synchronised clocks across nodes.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.RecoveryTimeout">
            <summary>
            Configured recovery timeout duration.
            + Determines delay before retry.
            - Excessive values can reduce availability.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.timespan"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.CircuitBreakerStats.TimeUntilRetry">
            <summary>
            Time remaining before a retry is permitted.
            + Zero when the circuit can execute immediately.
            - Calculated at access time; may drift.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Helpers.EnhancedRateLimiter">
            <summary>
            Enhanced rate limiter with exponential backoff and jitter.
            + Implements sophisticated throttling strategies
            + Reduces thundering herd problems with jitter
            - More complex than simple rate limiting
            TODO: Add adaptive rate limiting based on server responses
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.EnhancedRateLimiter.AlertThreshold">
            <summary>
            Gets the fraction of the limit at which warnings are emitted.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.EnhancedRateLimiter.RecoveryThreshold">
            <summary>
            Gets the fraction of the limit below which normal operation resumes.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.#ctor(Ark.Api.Binance.LimitInfo,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new rate limiter with the provided configuration.
            </summary>
            <param name="info">Limit settings including count and thresholds.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Wait with exponential backoff and jitter
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.RecordSuccess">
            <summary>
            Record a successful request
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.RecordFailure">
            <summary>
            Record a failed request for backoff calculation
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Helpers.EnhancedRateLimiter.Usage">
            <summary>
            Gets the current usage ratio relative to the limit.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.IsApproachingLimit">
            <summary>
            Indicates whether the current usage exceeds the alert threshold.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.IsBelowRecoveryThreshold">
            <summary>
            Determines if usage has fallen below the recovery threshold.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Helpers.EnhancedRateLimiter.Dispose">
            <summary>
            Releases underlying resources.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Diag">
            <summary>
            Diagnostics entry point for the Binance API project.
            </summary>
            <remarks>
            Provides access to loggers and indicators used throughout the project.
            </remarks>
            <example>
            <code>
            Diag.Logs.BinanceClient.LogInformation("started");
            </code>
            </example>
        </member>
        <member name="P:Ark.Api.Binance.Diag.MinimumLevel">
            <summary>Current minimal log level.</summary>
        </member>
        <member name="M:Ark.Api.Binance.Diag.ApplyLogLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>Applies the desired log level to all loggers.</summary>
        </member>
        <member name="T:Ark.Api.Binance.Indicators">
            <summary>
            Diagnostics indicators for the Binance API project.
            </summary>
            <remarks>
            Exposes counters and metrics through the base implementation.
            </remarks>
            <example>
            <code>
            var uptime = Diag.Indicators.Uptime;
            </code>
            </example>
        </member>
        <member name="T:Ark.Api.Binance.LatencyTrackerExtensions">
            <summary>
            Extends <see cref="T:Ark.Api.Binance.Services.LatencyTracker"/> with an asynchronous error completion wrapper.
            + Provides an awaitable wrapper around <see cref="M:Ark.Api.Binance.Services.LatencyTracker.CompleteWithError(System.String)"/>
            - Does not include additional latency data beyond the synchronous call
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.LatencyTrackerExtensions.CompleteWithErrorAsync(Ark.Api.Binance.Services.LatencyTracker,System.String)">
            <summary>
            Completes the latency tracker with the specified error message asynchronously.
            + Enables awaiting of error completions without relying on internal APIs
            - Returns a completed task without capturing exception context
            </summary>
            <param name="tracker">The tracker to complete.</param>
            <param name="reason">Human‑readable error description.</param>
            <returns>A completed <see cref="T:System.Threading.Tasks.Task"/> representing the operation.</returns>
        </member>
        <member name="T:Ark.Api.Binance.LevelFilteredLogger">
            <summary>
            Wraps an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> and filters messages below <see cref="P:Ark.Api.Binance.Diag.MinimumLevel"/>.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Loggers">
            <summary>
            Defines the loggers used by the Binance API project.
            </summary>
            <remarks>
            Instances are created automatically by <see cref="T:Ark.Api.Binance.Diag"/>.
            </remarks>
            <example>
            <code>
            Diag.Logs.TickerFollowupService.LogDebug("check");
            </code>
            </example>
        </member>
        <member name="P:Ark.Api.Binance.Loggers.TickerFollowupService">
            <summary>Logger for ticker followup service.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Loggers.OrderFollowupService">
            <summary>Logger for order followup service.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Loggers.PositionFollowupService">
            <summary>Logger for position followup service.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Loggers.BinanceClient">
            <summary>Logger for client operations.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Loggers.BinanceApiClientManager">
            <summary>Logger for BinanceApiClientManager operations.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Loggers.Database">
            <summary>Logger for database operations.</summary>
        </member>
        <member name="T:Ark.Api.Binance.Reports">
            <summary>
            Diagnostics reports for the Binance API project.
            </summary>
            <remarks>
            Reports aggregate data from <see cref="T:Ark.Api.Binance.Indicators"/> and loggers.
            </remarks>
            <example>
            <code>
            var report = new Reports();
            </code>
            </example>
        </member>
        <member name="T:Ark.Api.Binance.OrderHelper">
            <summary>
            Helper methods to place, modify and cancel orders.
            </summary>
            <remarks>
            These extension methods store order results inside the related <see cref="T:Ark.Api.Binance.BinanceSession"/>.
            </remarks>
            <example>
            <code>
            await session.PlaceOrderAsync(order);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.OrderHelper.PlaceOrderAsync(Ark.Api.Binance.BinanceSession,Ark.Api.Binance.FuturesOrder,System.Threading.CancellationToken,System.String)">
            <summary>
            Places an order using the provided session.
            </summary>
            <param name="session">Active Binance session.</param>
            <param name="order">Order parameters.</param>
            <param name="token">Cancellation token.</param>
            <param name="connectionString">Optional connection string for persisting the order.</param>
            <returns>The created order result.</returns>
        </member>
        <member name="M:Ark.Api.Binance.OrderHelper.ModifyOrderAsync(Ark.Api.Binance.BinanceSession,System.Int64,Ark.Api.Binance.FuturesOrder,System.Threading.CancellationToken,System.String)">
            <summary>
            Modifies an existing order.
            </summary>
            <param name="session">Active Binance session.</param>
            <param name="orderId">Identifier of the order to replace.</param>
            <param name="newOrder">New order details.</param>
            <param name="token">Cancellation token.</param>
            <param name="connectionString">Optional connection string for persisting the order.</param>
            <returns>The result of the new order.</returns>
        </member>
        <member name="M:Ark.Api.Binance.OrderHelper.CancelOrderAsync(Ark.Api.Binance.BinanceSession,System.String,System.Int64,System.Threading.CancellationToken,System.String)">
            <summary>
            Cancels an order.
            </summary>
            <param name="session">Active Binance session.</param>
            <param name="symbol">Trading symbol.</param>
            <param name="orderId">Identifier of the order to cancel.</param>
            <param name="token">Cancellation token.</param>
            <param name="connectionString">Optional connection string for persisting the cancellation.</param>
            <returns>A <see cref="T:Ark.Result"/> describing the cancellation.</returns>
        </member>
        <member name="T:Ark.Api.Binance.PositionHelper">
            <summary>
            Helper methods to manage session positions.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.PositionHelper.UpdatePositions(Ark.Api.Binance.BinanceSession,System.Collections.Generic.IEnumerable{Ark.Api.Binance.PositionDto},System.String)">
            <summary>
            Updates the session position dictionary and optionally records
            the entries to the database asynchronously.
            </summary>
            <param name="session">Active Binance session.</param>
            <param name="positions">The positions retrieved from Binance.</param>
            <param name="connectionString">Optional database connection string.</param>
        </member>
        <member name="T:Ark.Api.Binance.SessionOverviewHelper">
            <summary>
            Produces consolidated information for a <see cref="T:Ark.Api.Binance.BinanceSession"/>.
            <para>+ Aggregates orders, balances and incomes in one DTO.</para>
            <para>- Serializes API responses; large sessions may allocate heavily.</para>
            <para>Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/"/></para>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.SessionOverviewHelper.ToOverviewAsync(Ark.Api.Binance.BinanceSession,Ark.TimeWindow,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Ark.Api.Binance.SessionOverviewDto"/> from the in-memory session data.
            <para>+ Filters entities by a <see cref="T:Ark.TimeWindow"/> and computes available balance.</para>
            <para>- Invokes multiple network calls; call sparingly to avoid rate limits.</para>
            <para>Ref: <see href="https://learn.microsoft.com/dotnet/api/system.text.json"/></para>
            </summary>
            <param name="session">The Binance session.</param>
            <param name="window">Time window used to filter data.</param>
            <param name="token">Optional cancellation token.</param>
            <returns>
            Aggregated overview of the session.
            <code language="json">
            {
              "orders": [],
              "positions": []
            }
            </code>
            </returns>
        </member>
        <member name="T:Ark.Api.Binance.WalletHelper">
            <summary>
            Extension methods for wallet operations on a <see cref="T:Ark.Api.Binance.BinanceSession"/>.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.WalletHelper.TransferFuturesToFundingAsync(Ark.Api.Binance.BinanceSession,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Transfers funds from the futures wallet to the funding wallet.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.WalletHelper.TransferFundingToFuturesAsync(Ark.Api.Binance.BinanceSession,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Transfers funds from the funding wallet to the futures wallet.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.WebSocketHelper">
            <summary>
            Helper methods for websocket usage.
            </summary>
            <example>
            <code>
            var url = WebSocketHelper.GetTickerEndpoint("BTCUSDT");
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.WebSocketHelper.GetTickerEndpoint(System.String)">
            <summary>
            Formats a websocket endpoint for a ticker symbol.
            </summary>
            <param name="symbol">Trading symbol.</param>
            <returns>Endpoint string to use with the socket client.</returns>
        </member>
        <member name="T:Ark.Api.Binance.IncomeMapper">
            <summary>
            Mapping helpers for income history.
            + Converts between database entities and DTOs used by services.
            - Does not compute derived values like net totals or percentages.
            </summary>
            <example>
            <code>
            var dto = IncomeMapper.ToDto(entity);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.IncomeMapper.ToDto(Ark.Api.Binance.IncomeDbEntity)">
            <summary>
            Converts a database entity to a DTO.
            + Preserves amount, fee and status fields for reporting.
            - Ignores fields such as internal identifiers.
            </summary>
            <param name="entity">Database entity.</param>
            <returns>Equivalent DTO.</returns>
        </member>
        <member name="M:Ark.Api.Binance.IncomeMapper.ToEntity(Ark.Api.Binance.IncomeSummaryDto,System.Guid)">
            <summary>
            Converts a DTO to a database entity.
            + Associates the income entry with a session for persistence.
            - Assumes timestamps and amounts are already sanitized.
            </summary>
            <param name="dto">Income summary DTO.</param>
            <param name="sessionId">Identifier of the owning session.</param>
            <returns>The database entity.</returns>
        </member>
        <member name="T:Ark.Api.Binance.OrderMapper">
            <summary>
            Helpers to map order entities and DTOs.
            + Ensures consistent transformations between database and API layers.
            - Performs no validation of business rules or symbol filters.
            </summary>
            <example>
            <code>
            var entity = OrderMapper.ToEntity(dto, sessionId);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.OrderMapper.ToDto(Ark.Api.Binance.OrderDbEntity)">
            <summary>
            Maps a database entity to a DTO.
            + Copies matching fields without allocations.
            - Returns default values when source fields are unset.
            </summary>
            <param name="entity">Database order entity.</param>
            <returns>Order result DTO.</returns>
        </member>
        <member name="M:Ark.Api.Binance.OrderMapper.ToEntity(Ark.Api.Binance.OrderResultDto,System.Guid)">
            <summary>
            Maps a DTO to a database entity.
            + Prepares data for persistence with the owning session id.
            - Ignores invariants such as unique client order identifiers.
            </summary>
            <param name="dto">Order DTO.</param>
            <param name="sessionId">Owning session id.</param>
            <returns>Database entity.</returns>
        </member>
        <member name="T:Ark.Api.Binance.PositionMapper">
            <summary>
            Helper methods to map position information.
            + Facilitates translation between persistence models and DTOs.
            - Does not enforce leverage or quantity constraints.
            </summary>
            <example>
            <code>
            var dto = PositionMapper.ToDto(entity);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.PositionMapper.ToDto(Ark.Api.Binance.PositionDbEntity)">
            <summary>
            Converts a database entity to a DTO.
            + Copies position metrics for transport across layers.
            - Skips properties such as database keys or concurrency tokens.
            </summary>
            <param name="entity">Database entity.</param>
            <returns>Position DTO.</returns>
        </member>
        <member name="M:Ark.Api.Binance.PositionMapper.ToEntity(Ark.Api.Binance.PositionDto,System.Guid)">
            <summary>
            Converts a DTO to a database entity.
            + Assigns the owning session identifier during conversion.
            - Assumes the DTO has been validated elsewhere.
            </summary>
            <param name="dto">Position DTO.</param>
            <param name="sessionId">Owning session id.</param>
            <returns>Database entity.</returns>
        </member>
        <member name="T:Ark.Api.Binance.TickerMapper">
            <summary>
            Helper methods to map ticker information.
            + Provides lightweight conversions between persistence and transport models.
            - Omits validation such as symbol formatting or timestamp sanity checks.
            </summary>
            <example>
            <code>
            var dto = TickerMapper.ToDto(entity);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.TickerMapper.ToDto(Ark.Api.Binance.TickerDbEntity)">
            <summary>
            Converts a database entity to a DTO.
            + Allocates a new <see cref="T:Ark.Api.Binance.TickerDto"/> populated from the entity.
            - Ignores additional columns not represented in the DTO.
            </summary>
            <param name="entity">Ticker entity.</param>
            <returns>Ticker DTO.</returns>
        </member>
        <member name="M:Ark.Api.Binance.TickerMapper.ToEntity(Ark.Api.Binance.TickerDto,System.Guid)">
            <summary>
            Converts a DTO to a database entity.
            + Includes the owning session identifier for persistence.
            - Does not set database-generated values like identifiers.
            </summary>
            <param name="dto">Ticker DTO.</param>
            <param name="sessionId">Owning session id.</param>
            <returns>Ticker database entity.</returns>
        </member>
        <member name="T:Ark.Api.Binance.TradeMapper">
            <summary>
            Mapping helpers for trade history.
            + Translates between database entities and transferable DTOs.
            - Does not perform currency conversions or side calculations.
            </summary>
            <example>
            <code>
            var dto = TradeMapper.ToDto(entity);
            </code>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.TradeMapper.ToDto(Ark.Api.Binance.TradeDbEntity)">
            <summary>
            Converts a database entity to a DTO.
            + Copies trade details for external transmission.
            - Excludes navigation properties that may exist on the entity.
            </summary>
            <param name="entity">Trade entity.</param>
            <returns>Trade DTO.</returns>
        </member>
        <member name="M:Ark.Api.Binance.TradeMapper.ToEntity(Ark.Api.Binance.TradeHistoryDto,System.Guid)">
            <summary>
            Converts a DTO to a database entity.
            + Associates the trade with its owning session identifier.
            - Assumes the DTO values are already validated.
            </summary>
            <param name="dto">Trade DTO.</param>
            <param name="sessionId">Owning session id.</param>
            <returns>Trade entity.</returns>
        </member>
        <member name="T:Ark.Api.Binance.BinanceEnvironment">
            <summary>
            Specifies the Binance environment to use.
            + <see cref="F:Ark.Api.Binance.BinanceEnvironment.Testnet"/> enables safe experimentation.
            - <see cref="F:Ark.Api.Binance.BinanceEnvironment.Production"/> actions affect real funds.
            </summary>
        </member>
        <member name="F:Ark.Api.Binance.BinanceEnvironment.Testnet">
            <summary>Connects to the Binance test network.</summary>
        </member>
        <member name="F:Ark.Api.Binance.BinanceEnvironment.Production">
            <summary>Connects to the live Binance environment.</summary>
        </member>
        <member name="T:Ark.Api.Binance.BinanceSession">
            <summary>
            Represents a running Binance client session.
            + Holds state for API connectivity and cached data.
            - Not thread-safe for external mutations beyond provided dictionaries.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.Id">
            <summary>
            Identifier of the session.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.Options">
            <summary>
            Options used to instantiate the client.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.Client">
            <summary>
            The API client instance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.Orders">
            <summary>
            Stores the result of placed orders.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.Positions">
            <summary>
            Stores the latest known positions keyed by symbol.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.FuturesBalances">
            <summary>
            Available futures balances keyed by asset ticker.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceSession.Created">
            <summary>
            UTC creation timestamp.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.BinanceSession.#ctor(Ark.Api.Binance.BinanceOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new <see cref="T:Ark.Api.Binance.BinanceSession"/> instance.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Models.CompleteTradeFees">
            <summary>
            Internal representation of total fees for a trade.
            + Breaks down entry, exit and funding costs.
            - Ignores slippage and borrowing interest.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Models.CompleteTradeFees.EntryFee">
            <summary>Fee paid when entering the trade.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Models.CompleteTradeFees.ExitFee">
            <summary>Fee paid when exiting the trade.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Models.CompleteTradeFees.FundingFee">
            <summary>Funding fee incurred during the position.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Models.CompleteTradeFees.TotalFees">
            <summary>Sum of all fees related to the trade.</summary>
        </member>
        <member name="T:Ark.Api.Binance.FuturesOrder">
            <summary>
            Represents a futures order request.
            + Encapsulates parameters for Binance futures placement.
            - Does not validate against symbol-specific filters.
            Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/#new-order-trade"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.Symbol">
            <summary>
            Trading symbol (e.g. BTCUSDT).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.Side">
            <summary>
            Order side (Buy or Sell).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.Type">
            <summary>
            Order type (Market, Limit, Stop, ...).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.Quantity">
            <summary>
            Quantity to trade.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.Price">
            <summary>
            Price for limit orders.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.StopPrice">
            <summary>
            Stop price when applicable.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.TimeInForce">
            <summary>
            Time in force policy.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.ReduceOnly">
            <summary>
            Indicates if the order reduces an existing position.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.PositionSide">
            <summary>
            Position side (Long, Short or Both).
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.FuturesOrder.ClientOrderId">
            <summary>
            Optional client order identifier.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.LimitInfo">
            <summary>
            Information about an API rate limit.
            + Indicates thresholds for requests and orders.
            - Does not include current usage metrics.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LimitInfo.Limit">
            <summary>
            Maximum number of requests allowed.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LimitInfo.Interval">
            <summary>
            Interval for the limit.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LimitInfo.AlertThreshold">
            <summary>
            Usage ratio at which alerts are emitted.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.LimitInfo.RecoveryThreshold">
            <summary>
            Usage ratio under which the limiter is considered recovered.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.UpdateFeeRulesRequest">
            <summary>
            Request payload to update trading fee rules.
            + Supports adjusting maker/taker rates and funding assumptions.
            - Updates apply globally; per-user tiers are not handled.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateFeeRulesRequest.MakerFee">
            <summary>Maker fee rate.</summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateFeeRulesRequest.TakerFee">
            <summary>Taker fee rate.</summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateFeeRulesRequest.FundingRate">
            <summary>Estimated funding rate.</summary>
        </member>
        <member name="T:Ark.Api.Binance.UpdateRateLimitsRequest">
            <summary>
            Request payload to adjust rate limit settings.
            + Enables dynamic throttling based on expected load.
            - Incorrect values may violate exchange constraints.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateRateLimitsRequest.WeightLimit">
            <summary>Maximum allowed weight per minute.</summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateRateLimitsRequest.OrderLimit">
            <summary>Maximum allowed orders per minute.</summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateRateLimitsRequest.AlertThreshold">
            <summary>Threshold to trigger alerts.</summary>
        </member>
        <member name="P:Ark.Api.Binance.UpdateRateLimitsRequest.RecoveryThreshold">
            <summary>Threshold under which usage is considered recovered.</summary>
        </member>
        <member name="T:Ark.Api.Binance.ValidateProfitabilityRequest">
            <summary>
            Request payload used to validate trade profitability after fees.
            + Provides inputs for comparing profit and fee costs.
            - Assumes static fees and ignores slippage.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.ValidateProfitabilityRequest.Quantity">
            <summary>Quantity of contracts traded.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ValidateProfitabilityRequest.EntryPrice">
            <summary>Price at entry.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ValidateProfitabilityRequest.ExitPrice">
            <summary>Expected exit price.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ValidateProfitabilityRequest.EntryIsMaker">
            <summary>True if the entry order is maker.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ValidateProfitabilityRequest.ExitIsMaker">
            <summary>True if the exit order is maker.</summary>
        </member>
        <member name="P:Ark.Api.Binance.ValidateProfitabilityRequest.VipLevel">
            <summary>Binance VIP level (0-9).</summary>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.BulkheadPolicy">
            <summary>
            Applies the bulkhead resilience pattern to isolate a resource pool.
            + Limits concurrent operations to avoid resource exhaustion.
            - Requests beyond the limit wait for an available slot.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/resilience/bulkhead"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.BulkheadPolicy.#ctor(System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes the policy with a maximum number of concurrent operations.
            + Uses <see cref="T:System.Threading.SemaphoreSlim"/> to guard the critical section.
            - A high value may still cause contention under heavy load.
            </summary>
            <param name="maxConcurrency">Maximum number of simultaneous operations.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for diagnostics.</param>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.BulkheadPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an asynchronous operation within the bulkhead, waiting until capacity is available.
            + Prevents resource saturation by queuing requests.
            - Adds latency when all slots are occupied.
            </summary>
            <typeparam name="TResult">Type returned by the operation.</typeparam>
            <param name="operation">Operation to execute when a slot is acquired.</param>
            <returns>The result produced by <paramref name="operation"/>.</returns>
        </member>
        <member name="P:Ark.Api.Binance.Resilience.BulkheadPolicy.AvailableCount">
            <summary>
            Remaining slots that can be acquired without blocking.
            + Useful for monitoring throughput.
            - May be stale immediately after retrieval under contention.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Resilience.BulkheadPolicy.MaxConcurrency">
            <summary>
            Maximum concurrent operations allowed by this bulkhead.
            + Controls parallelism for protected resources.
            - Must be tuned to match downstream capacity.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.BulkheadPolicy.Dispose">
            <summary>
            Releases resources used by the policy.
            + No unmanaged handles are held.
            - Future implementations may introduce disposable members.
            Ref: <see href="https://learn.microsoft.com/dotnet/standard/garbage-collection/implementing-dispose"/>
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.CircuitBreakerOpenException">
            <summary>
            Exception raised when an operation is invoked while the circuit breaker is open.
            + Provides immediate feedback to the caller about circuit state.
            - Does not include the triggering exception details.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/resilience/circuit-breaker"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.CircuitBreakerOpenException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a descriptive message.
            + Allows custom error descriptions for diagnostics.
            - Message should not expose sensitive information.
            </summary>
            <param name="message">Explanation of the open circuit condition.</param>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.CircuitBreakerPolicy">
            <summary>
            Implements a circuit breaker to prevent cascading failures.
            + Opens after consecutive failures and recovers after a timeout.
            + Emits state change events for diagnostics.
            - May block requests even after external recovery until timeout elapses.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/resilience/circuit-breaker"/>
            </summary>
        </member>
        <member name="E:Ark.Api.Binance.Resilience.CircuitBreakerPolicy.StateChanged">
            <summary>
            Occurs when the circuit changes state.
            + Allows subscribers to observe resilience behavior.
            - Handlers execute synchronously and should be lightweight.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.CircuitBreakerPolicy.#ctor(System.Int32,System.Nullable{System.TimeSpan},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new circuit breaker policy.
            + Customizable failure threshold and recovery timeout.
            - Initial failures before tracking starts are not counted.
            </summary>
            <param name="failureThreshold">Number of failures before opening the circuit.</param>
            <param name="recoveryTimeout">Time to wait before allowing a test request.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for diagnostic messages.</param>
        </member>
        <member name="P:Ark.Api.Binance.Resilience.CircuitBreakerPolicy.State">
            <summary>
            Current state of the circuit breaker.
            + Enables callers to query the circuit status.
            - Exposes internal state that may change concurrently.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.CircuitBreakerPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an operation, preventing calls when the circuit is open.
            + Protects downstream services from repeated failures.
            - Introduces locking overhead for each call.
            </summary>
            <typeparam name="TResult">Type returned by the operation.</typeparam>
            <param name="operation">Operation to invoke when permitted.</param>
            <returns>Result of the executed <paramref name="operation"/>.</returns>
            <exception cref="T:Ark.Api.Binance.Resilience.CircuitBreakerOpenException">Thrown when the circuit is open and not ready for retry.</exception>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.CircuitBreakerPolicy.Dispose">
            <summary>
            Releases resources used by the policy.
            + No unmanaged handles are held.
            - Future implementations may introduce disposable members.
            Ref: <see href="https://learn.microsoft.com/dotnet/standard/garbage-collection/implementing-dispose"/>
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.CircuitState">
            <summary>
            Circuit breaker states
            + Closed – normal operation
            + Open – failing and blocking requests
            + HalfOpen – testing for recovery
            </summary>
        </member>
        <member name="F:Ark.Api.Binance.Resilience.CircuitState.Closed">
            <summary>Closed – normal operation</summary>
        </member>
        <member name="F:Ark.Api.Binance.Resilience.CircuitState.Open">
            <summary>Open – failing and blocking requests</summary>
        </member>
        <member name="F:Ark.Api.Binance.Resilience.CircuitState.HalfOpen">
            <summary>HalfOpen – testing for recovery</summary>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.CircuitStateChangedEventArgs">
            <summary>
            State transition event arguments for <see cref="T:Ark.Api.Binance.Resilience.CircuitBreakerPolicy"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Resilience.CircuitStateChangedEventArgs.OldState">
            <summary>
            State before the transition.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Resilience.CircuitStateChangedEventArgs.NewState">
            <summary>
            State after the transition.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.CircuitStateChangedEventArgs.#ctor(Ark.Api.Binance.Resilience.CircuitState,Ark.Api.Binance.Resilience.CircuitState)">
            <summary>
            Initializes a new instance of the event args with the old and new circuit states.
            </summary>
            <param name="oldState">State prior to the change.</param>
            <param name="newState">State after the change.</param>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.RealResiliencePipeline`1">
            <summary>
            Production-ready resilience pipeline with circuit breaker, retry, and bulkhead patterns
            + Implements sophisticated failure handling
            + Provides metrics and observability
            + Configurable policies per operation type
            + Cache-aside for idempotent GET operations
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.RealResiliencePipeline`1.#ctor(Ark.Api.Binance.Resilience.RetryPolicy,Ark.Api.Binance.Resilience.CircuitBreakerPolicy,Ark.Api.Binance.Resilience.BulkheadPolicy,Microsoft.Extensions.Logging.ILogger,Ark.Api.Binance.Helpers.EnhancedRateLimiter)">
            <summary>
            Initializes a new instance of the pipeline with the specified resilience policies.
            </summary>
            <param name="retryPolicy">Policy handling transient failures.</param>
            <param name="circuitBreakerPolicy">Policy controlling circuit state transitions.</param>
            <param name="bulkheadPolicy">Policy limiting concurrent executions.</param>
            <param name="logger">Optional logger for diagnostics.</param>
            <param name="rateLimiter">Optional rate limiter for throttling.</param>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.RealResiliencePipeline`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.String,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Executes the provided operation with the configured resilience policies.
            </summary>
            <param name="operation">Delegate representing the work to execute.</param>
            <param name="cacheKey">Optional cache key for result caching.</param>
            <param name="cacheDuration">Optional time-to-live for cached results.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.RealResiliencePipeline`1.Dispose">
            <summary>
            Disposes underlying policies and releases resources.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Resilience.RetryPolicy">
            <summary>
            Advanced retry policy with exponential backoff and jitter
            + Handles transient errors transparently
            + Use for operations requiring resilience
            - Avoid for non-idempotent operations that must not repeat
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.RetryPolicy.#ctor(System.Int32,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Double,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the retry policy.
            </summary>
            <param name="maxRetries">Maximum number of retry attempts.</param>
            <param name="baseDelay">Initial delay before retrying.</param>
            <param name="maxDelay">Maximum delay between retries.</param>
            <param name="backoffMultiplier">Multiplier applied for exponential backoff.</param>
            <param name="logger">Optional logger for diagnostics.</param>
        </member>
        <member name="M:Ark.Api.Binance.Resilience.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified operation applying the retry policy.
            </summary>
            <typeparam name="TResult">Type of the operation result.</typeparam>
            <param name="operation">Delegate representing the operation.</param>
            <param name="cancellationToken">Token to cancel the execution.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Services.FeeCalculationService">
            <summary>
            Service de calcul précis des frais pour optimiser les profits
            + Calcul en temps réel des frais de trading, funding et liquidation
            + Prise en compte des tiers VIP et des réductions BNB
            + Optimisation des montants de click pour garantir PnL positif
            - Les estimations ne prennent pas encore en compte la volatilité historique
            TODO: Ajouter support pour les contrats COIN-M
            TODO: Intégrer l'historique des taux de funding
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeCalculationService.#ctor(Microsoft.Extensions.Logging.ILogger{Ark.Api.Binance.Services.FeeCalculationService},Microsoft.Extensions.Options.IOptionsMonitor{Ark.Api.Binance.BinanceOptions},Ark.Api.Binance.Services.FeeRulesService)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.Services.FeeCalculationService"/> class.
            </summary>
            <param name="logger">Logger for diagnostic messages.</param>
            <param name="options">Monitor providing Binance configuration.</param>
            <param name="feeRules">Service supplying fee and funding rules.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeCalculationService.CalculateOptimalClickAmount(System.String,System.Decimal,System.Decimal,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Calcule le montant optimal de click pour garantir un PnL positif
            + Prend en compte tous les frais: trading, funding, slippage
            - Basé sur des hypothèses simplifiées de volatilité
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeCalculationService.ValidateProfitabilityAsync(System.String,System.Decimal,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Valide qu'un ordre générera un profit positif après tous les frais
            + Compare les frais totaux au profit brut prévu
            - Ne considère pas le glissement ou les variations de funding après l'entrée
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeCalculationService.ProjectMarginAsync(System.String,System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Projects initial and maintenance margin requirements for a position.
            + Uses notional value and leverage to estimate margin consumption.
            - Uses constant maintenance rate pending symbol-specific integration.
            </summary>
            <param name="symbol">Futures contract symbol.</param>
            <param name="quantity">Number of contracts.</param>
            <param name="price">Entry price in quote asset.</param>
            <param name="leverage">Applied leverage multiplier.</param>
            <returns>Estimated margin requirements.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Services.FeeRulesService">
            <summary>
            Manages retrieval and caching of Binance fee rules.
            + Uses <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> to reduce database queries.
            - Cached rules may be stale for up to five minutes.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/caching/memory"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeRulesService.#ctor(Ark.Api.Binance.BinanceDbContext,Microsoft.Extensions.Logging.ILogger{Ark.Api.Binance.Services.FeeRulesService},Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.Services.FeeRulesService"/> class.
            </summary>
            <param name="context">Entity Framework context used to access fee rules.</param>
            <param name="logger">Logger for diagnostic information.</param>
            <param name="cache">Memory cache for storing recent fee rules.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeRulesService.GetFeeRulesAsync(System.String)">
            <summary>
            Retrieves active fee rules for a trading symbol.
            + Returns cached values when available.
            - Creates default rules if none exist.
            </summary>
            <param name="symbol">Trading pair identifier, e.g. <c>BTCUSDT</c>.</param>
            <returns>
            Active <see cref="T:Ark.Api.Binance.FeeRulesDbEntity"/>. Example:
            <code>
            {
              "symbol": "BTCUSDT",
              "makerFeeVip0": 0.0002,
              "takerFeeVip0": 0.0005
            }
            </code>
            </returns>
            <remarks>Ref: <see href="https://binance-docs.github.io/apidocs/futures/en/"/></remarks>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeRulesService.GetCurrentFundingRateAsync(System.String)">
            <summary>
            Gets the current funding rate for a symbol.
            + Leverages cached rules for efficiency.
            - Returns 0 when rules are missing.
            </summary>
            <param name="symbol">Trading pair to inspect.</param>
            <returns>Funding rate expressed as a decimal fraction.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.FeeRulesService.CreateDefaultFeeRules(System.String)">
            <summary>
            Creates default fee rules when none exist for the symbol.
            + Guarantees callers receive a valid configuration.
            - Placeholder values may differ from exchange data.
            </summary>
            <param name="symbol">Trading symbol requiring default rules.</param>
            <returns>Newly persisted <see cref="T:Ark.Api.Binance.FeeRulesDbEntity"/>.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Services.LatencyManagementService">
            <summary>
            Coordinates collection and evaluation of latency metrics.
            + Persists <see cref="T:Ark.Api.Binance.Services.LatencyMeasurement"/> records for diagnostics.
            + Triggers threshold alerts from <see cref="T:Ark.Api.Binance.Services.LatencyOptions"/>.
            - Maintains in-memory history which grows with high traffic.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/diagnostics/"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyManagementService.#ctor(Ark.Api.Binance.BinanceDbContext,Microsoft.Extensions.Logging.ILogger{Ark.Api.Binance.Services.LatencyManagementService},Microsoft.Extensions.Options.IOptionsMonitor{Ark.Api.Binance.Services.LatencyOptions})">
            <summary>
            Creates a new management service for latency tracking.
            </summary>
            <param name="context">Database context storing measurements.</param>
            <param name="logger">Logger for diagnostics output.</param>
            <param name="options">Monitored latency thresholds.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyManagementService.StartLatencyMeasurement(System.String,System.String)">
            <summary>
            Begins measuring latency for a specific endpoint.
            + Returns a tracker that records start/stop timestamps.
            - Caller must dispose the tracker to persist data.
            </summary>
            <param name="endpoint">Binance endpoint name.</param>
            <param name="requestType">Communication type such as <c>REST</c> or <c>WS</c>.</param>
            <returns>Disposable tracker that reports latency on completion.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyManagementService.RecordLatencyMeasurement(Ark.Api.Binance.Services.LatencyMeasurement)">
            <summary>
            Persists and evaluates a completed latency measurement.
            + Stores metrics to <see cref="T:Ark.Api.Binance.BinanceDbContext"/>.
            + Returns operation outcome for caller diagnostics.
            - Database write may impact throughput under load.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/diagnostics/"/>
            </summary>
            <param name="measurement">Measured latency information.</param>
            <returns>A <see cref="T:Ark.Result"/> indicating success or unexpected failure.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Services.LatencyMeasurement">
            <summary>
            Represents a single latency data point.
            + Captures timing and success flags.
            - Lacks network/processing separation by default.
            Ref: <see href="https://learn.microsoft.com/dotnet/api/system.datetime"/>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.Endpoint">
            <summary>
            Name of the endpoint being measured.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.RequestType">
            <summary>
            HTTP method or request type.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.RequestStartTime">
            <summary>
            UTC timestamp when the request was sent.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.ResponseReceivedTime">
            <summary>
            UTC timestamp when the response was received.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.BinanceTimestamp">
            <summary>
            Binance-provided timestamp, if available.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.TotalLatencyMs">
            <summary>
            Total round-trip latency in milliseconds.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.NetworkLatencyMs">
            <summary>
            Estimated network latency in milliseconds.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.ProcessingLatencyMs">
            <summary>
            Estimated processing latency in milliseconds.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.IsSuccessful">
            <summary>
            Indicates whether the request succeeded.
            + Useful for reliability tracking.
            - Does not capture partial successes.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.ErrorCode">
            <summary>
            Binance error code if the request failed.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.MeasuredAt">
            <summary>
            Time when the measurement was recorded.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyMeasurement.AdditionalDataJson">
            <summary>
            Additional metadata in JSON format.
            + Allows attaching custom diagnostic data.
            </summary>
            <example>
            {
              "symbol": "BTCUSDT",
              "recvWindow": 5000
            }
            </example>
        </member>
        <member name="T:Ark.Api.Binance.Services.LatencyOptions">
            <summary>
            Configuration for latency management thresholds.
            + Provides control over warning and critical levels.
            - Values are applied globally across endpoints.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            <example>
            {
              "WarningLatencyThresholdMs": 1000,
              "CriticalLatencyThresholdMs": 3000,
              "AverageLatencyThresholdMs": 500,
              "EnableEmergencyLiquidation": true,
              "EnableOrderCancellation": true
            }
            </example>
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyOptions.WarningLatencyThresholdMs">
            <summary>
            Warning threshold in milliseconds beyond which latency is considered degraded.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyOptions.CriticalLatencyThresholdMs">
            <summary>
            Critical threshold in milliseconds that triggers emergency handling.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyOptions.AverageLatencyThresholdMs">
            <summary>
            Average latency limit in milliseconds used for trend monitoring.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyOptions.EnableEmergencyLiquidation">
            <summary>
            Enables forced position liquidation when critical latency persists.
            + Adds safety during major outages.
            - May exit profitable trades prematurely.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.LatencyOptions.EnableOrderCancellation">
            <summary>
            Cancels outstanding orders when critical latency is observed.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Services.LatencyTracker">
            <summary>
            Tracks latency for a single request.
            + Records success or failure measurements
            - Does not guard against concurrent reuse
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyTracker.#ctor(Ark.Api.Binance.Services.LatencyManagementService,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.Services.LatencyTracker"/> class.
            </summary>
            <param name="service">Management service persisting measurements.</param>
            <param name="endpoint">Endpoint being measured.</param>
            <param name="requestType">Protocol identifier such as <c>REST</c> or <c>WS</c>.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyTracker.CompleteAsync(System.Nullable{System.DateTime},System.String)">
            <summary>
            Completes the measurement successfully.
            + Persists latency details
            + Returns storage result for optional inspection
            - Assumes single completion per tracker
            Ref: <see href="https://learn.microsoft.com/dotnet/core/diagnostics/"/>
            </summary>
            <param name="binanceTimestamp">Timestamp reported by Binance.</param>
            <param name="additionalData">Optional JSON payload for diagnostics.</param>
            <returns>A <see cref="T:Ark.Result"/> describing the persistence outcome.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyTracker.CompleteWithError(System.String)">
            <summary>
            Completes the tracker with an error code.
            + Triggers async persistence of failed measurement
            - Does not await completion of the underlying storage
            </summary>
            <param name="errorCode">Machine-readable error identifier.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.LatencyTracker.Dispose">
            <summary>
            Disposes the tracker, recording an error if measurement was not completed.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Services.RateLimitAnalyzer">
            <summary>
            Provides utility methods to estimate API weight and order rate usage.
            + Helps plan request batches without violating Binance limits.
            - Does not query remote limits automatically.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.RateLimitAnalyzer.WeightLimitPerMin">
            <summary>
            Default weight limit per minute.
            + Based on Binance REST API rules.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.RateLimitAnalyzer.OrderLimitPerMin">
            <summary>
            Default order limit per minute.
            + All order endpoints share the same cap.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.RateLimitAnalyzer.OrderLimitPer10s">
            <summary>
            Default order burst limit for 10 seconds.
            + Prevents short spikes that would trigger bans.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall">
            <summary>
            Describes an API call with its weight and whether it counts as an order.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall.Endpoint">
            <summary>Endpoint name.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall.Weight">
            <summary>Weight used for the call.</summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall.IsOrder">
            <summary>True if call places or cancels orders.</summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitAnalyzer.CalculateWeightUsage(System.Collections.Generic.IEnumerable{Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall})">
            <summary>
            Calculates total request weight for a batch and checks against the minute limit.
            </summary>
            <param name="calls">Batch of API calls.</param>
            <returns>Tuple of total weight and whether the limit is exceeded.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitAnalyzer.DetectWeightBurstViolation(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Double,Ark.Api.Binance.Services.RateLimitAnalyzer.ApiCall}})">
            <summary>
            Detects if any rolling one minute window exceeds the weight limit.
            + Assumes calls are ordered by time in seconds.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitAnalyzer.CheckOrderRate(System.Int32,System.Double)">
            <summary>
            Checks if a batch of order placements violates order rate limits.
            </summary>
            <param name="orderCount">Number of orders to place.</param>
            <param name="batchDurationSec">Duration for sending the orders.</param>
            <returns>Message indicating whether limits are safe or violated.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitAnalyzer.SuggestOrderStaggerDelay(System.Int32)">
            <summary>
            Suggests a minimal delay between orders to respect the 300/10s burst cap.
            </summary>
            <param name="ordersToPlace">Total number of orders.</param>
            <returns>Recommended delay in milliseconds.</returns>
        </member>
        <member name="T:Ark.Api.Binance.Services.RateLimitRulesService">
            <summary>
            Service managing persistence of rate limit rules.
            + Caches rules for fast retrieval and stores updates in the database.
            - In-memory cache may deliver stale values until refreshed.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitRulesService.#ctor(Ark.Api.Binance.BinanceDbContext,Microsoft.Extensions.Logging.ILogger{Ark.Api.Binance.Services.RateLimitRulesService},Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.Services.RateLimitRulesService"/> class.
            </summary>
            <param name="context">Database context providing persisted rules.</param>
            <param name="logger">Logger for diagnostics.</param>
            <param name="cache">In-memory cache for quick rule lookups.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitRulesService.GetRulesAsync(System.String)">
            <summary>
            Retrieves configured rate limit rules for an endpoint category.
            + Returns cached values when available to minimise database hits.
            - Creates default entries when none exist in storage.
            </summary>
            <param name="category">Endpoint group name.</param>
            <returns>The stored rules for the category.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitRulesService.UpdateRulesAsync(Ark.Api.Binance.UpdateRateLimitsRequest,System.String)">
            <summary>
            Updates and persists rate limit rules for a category.
            + Applies changes immediately and clears relevant cache entries.
            - Does not validate values against Binance hard limits.
            </summary>
            <param name="request">New rule values.</param>
            <param name="category">Endpoint group name.</param>
        </member>
        <member name="T:Ark.Api.Binance.Services.RateLimitSimulationService">
            <summary>
            Provides rate limit simulation using <see cref="T:Ark.Api.Binance.Services.RateLimitAnalyzer"/>.
            + Evaluates planned calls to predict weight and order rate usage.
            - Uses static assumptions; live limits may differ.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitSimulationService.#ctor(Ark.Api.Binance.Services.RateLimitAnalyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.Services.RateLimitSimulationService"/> class.
            </summary>
            <param name="analyzer">Analyzer used to evaluate rate limit usage.</param>
        </member>
        <member name="M:Ark.Api.Binance.Services.RateLimitSimulationService.Simulate(Ark.Api.Binance.RateLimitSimulationRequestDto)">
            <summary>
            Simulates weight usage and order rates for a batch of API calls.
            + Aggregates call weights and detects burst violations.
            - Ignores network failures or API key restrictions.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Services.WebSocketManager">
            <summary>
            Provides resilient WebSocket subscription management with automatic reconnection.
            + Handles heartbeat monitoring and exponential backoff.
            + Maintains subscription state across reconnects.
            - Connection pooling and subscription recovery are not implemented.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
        </member>
        <member name="E:Ark.Api.Binance.Services.WebSocketManager.ConnectionStatusChanged">
            <summary>
            Fired when the connection state changes for any subscription.
            + Allows external monitoring of socket connectivity.
            - Event ordering is not guaranteed during reconnection storms.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
        </member>
        <member name="E:Ark.Api.Binance.Services.WebSocketManager.ErrorOccurred">
            <summary>
            Fired when an exception occurs during WebSocket processing.
            + Enables centralized error handling and logging.
            - Exceptions originate from background threads.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.WebSocketManager.#ctor(Binance.Net.Clients.BinanceSocketClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.Services.WebSocketManager"/> class.
            + Accepts an injected <see cref="T:Binance.Net.Clients.BinanceSocketClient"/> for testing.
            + Starts heartbeat monitoring immediately.
            - Caller remains responsible for disposing the manager.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.WebSocketManager.SubscribeTickerAsync(System.String,System.Action{Ark.Api.Binance.TickerDto},Binance.Net.Enums.KlineInterval)">
            <summary>
            Subscribes to kline updates with automatic reconnection.
            + Performs exponential backoff on failures.
            - Returns <c>false</c> when cancellation is requested.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
            <param name="symbol">Trading pair symbol.</param>
            <param name="onTick">Callback invoked with ticker data.</param>
            <param name="interval">Aggregation interval for klines.</param>
            <returns><c>true</c> when subscription is established.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.WebSocketManager.UnsubscribeTickerAsync(System.String,Binance.Net.Enums.KlineInterval)">
            <summary>
            Unsubscribes from ticker updates.
            + Releases underlying WebSocket resources.
            - Returns <c>false</c> when no subscription exists.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
            <param name="symbol">Trading pair symbol.</param>
            <param name="interval">Aggregation interval for klines.</param>
            <returns><c>true</c> when subscription was removed.</returns>
        </member>
        <member name="M:Ark.Api.Binance.Services.WebSocketManager.HandleTickerUpdate(Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo,Binance.Net.Interfaces.IBinanceKline)">
            <summary>
            Converts incoming kline data to <see cref="T:Ark.Api.Binance.TickerDto"/> and forwards it to subscribers.
            + Maps close price and time from Binance.Net models.
            - Assumes payload implements <see cref="T:Binance.Net.Interfaces.IBinanceKline"/>.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.Services.WebSocketManager.Dispose">
            <summary>
            Releases managed resources and unsubscribes active streams.
            + Cancels heartbeat timer and outstanding operations.
            - Pending unsubscribe calls are not awaited.
            Ref: <see href="https://github.com/JKorf/Binance.Net"/>
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo">
            <summary>
            Holds state for an individual WebSocket subscription.
            + Facilitates reconnection attempts and cleanup.
            - Exposed only internally.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo.Symbol">
            <summary>
            Symbol being monitored.
            + Used as part of the subscription key.
            - Case sensitivity is not enforced.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo.Interval">
            <summary>
            Interval of kline updates.
            + Defines the aggregation period for ticks.
            - Only futures intervals are supported.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo.Callback">
            <summary>
            Callback invoked on new ticker data.
            + Allows higher layers to process updates.
            - Executed on thread pool context.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo.IsActive">
            <summary>
            Indicates whether the subscription is active.
            + Checked before reconnection attempts.
            - Not thread safe for external modification.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo.LastUpdate">
            <summary>
            Timestamp of the last received update.
            + Helps detect stale connections.
            - Drift possible if system clock changes.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.Services.WebSocketManager.SubscriptionInfo.SubscriptionId">
            <summary>
            Identifier returned by the Binance client.
            + Required for unsubscription.
            - Valid only for the lifetime of the connection.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.OrderFollowupService">
            <summary>
            Periodically queries Binance for open order information.
            + Keeps session order caches in sync with exchange state.
            - High frequency polling may increase API weight usage.
            </summary>
            <remarks>
            This hosted service relies on <see cref="T:Ark.Api.Binance.BinanceApiClientManager"/> to access the Binance REST API
            and runs according to the configuration specified in <see cref="T:Ark.Api.Binance.OrderFollowupSettings"/>.
            </remarks>
            <example>
            <code>
            var service = new OrderFollowupService(options);
            await service.ExecuteBlAsync(CancellationToken.None);
            </code>
            <output>Logs the list of open orders on success.</output>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.OrderFollowupService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{Ark.Api.Binance.BinanceOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.OrderFollowupService"/> class.
            </summary>
            <param name="configuration">Service configuration provider.</param>
            <param name="options">Application options for the Binance client.</param>
        </member>
        <member name="P:Ark.Api.Binance.OrderFollowupService.Logger">
            <summary>
            Gets the logger instance used by this service.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.OrderFollowupService.ExecuteBlAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Fetches the open orders from Binance.
            </summary>
            <param name="cancellationToken">Token used to cancel the operation.</param>
            <returns>The result of the Binance call.</returns>
            <example>
            <code>
            var result = await service.ExecuteBlAsync(CancellationToken.None);
            if (result.IsSuccess)
            {
                // handle orders
            }
            </code>
            <output>Returns <c>Result.Success</c> when orders are successfully retrieved.</output>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.OrderFollowupService.Execute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Ark.Api.Binance.PositionFollowupService">
            <summary>
            Periodically requests open position information from Binance.
            + Updates in-memory positions and available balances for each session.
            - Frequent polling may count toward account weight limits.
            </summary>
            <remarks>
            The service communicates with Binance via <see cref="T:Ark.Api.Binance.BinanceApiClientManager"/> and
            is scheduled using settings defined in <see cref="T:Ark.Api.Binance.PositionFollowupSettings"/>.
            </remarks>
            <example>
            <code>
            var service = new PositionFollowupService(options);
            await service.ExecuteBlAsync(CancellationToken.None);
            </code>
            <output>Logs the open positions when successful.</output>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.PositionFollowupService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{Ark.Api.Binance.BinanceOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.PositionFollowupService"/> class.
            </summary>
            <param name="configuration">Service configuration provider.</param>
            <param name="options">Options used to configure the Binance client.</param>
        </member>
        <member name="P:Ark.Api.Binance.PositionFollowupService.Logger">
            <summary>
            Gets the logger instance used by this service.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.PositionFollowupService.ExecuteBlAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves the open positions from Binance.
            </summary>
            <param name="cancellationToken">Token used to cancel the operation.</param>
            <returns>The result of the Binance API call.</returns>
            <example>
            <code>
            var result = await service.ExecuteBlAsync(CancellationToken.None);
            </code>
            <output>Returns <c>Result.Success</c> when the call succeeds.</output>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.PositionFollowupService.Execute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Ark.Api.Binance.TickerFollowupService">
            <summary>
            Service that periodically fetches ticker information from Binance.
            + Supports both REST polling and WebSocket streaming.
            - Retains ticker history only in memory; data is lost on restart.
            </summary>
            <remarks>
            The service contacts Binance through <see cref="T:Ark.Api.Binance.BinanceApiClientManager"/> and
            uses the configuration provided via <see cref="T:Ark.Api.Binance.TickerFollowupSettings"/> to determine
            which symbols should be monitored.
            </remarks>
            <example>
            <code>
            var service = new TickerFollowupService(options);
            await service.ExecuteBlAsync(CancellationToken.None);
            </code>
            <output>Retrieves the latest ticker data for the configured symbols.</output>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.TickerFollowupService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{Ark.Api.Binance.BinanceOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Ark.Api.Binance.TickerFollowupService"/> class.
            </summary>
            <param name="configuration">Service configuration provider.</param>
            <param name="options">Options used to configure the Binance client.</param>
        </member>
        <member name="P:Ark.Api.Binance.TickerFollowupService.Logger">
            <summary>
            Gets the logger instance used by this service.
            </summary>
        </member>
        <member name="M:Ark.Api.Binance.TickerFollowupService.GetTickers">
            <summary>
            Retrieves the list of symbols currently tracked by the service.
            </summary>
            <returns>Distinct list of tickers.</returns>
        </member>
        <member name="M:Ark.Api.Binance.TickerFollowupService.SetTickers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the set of symbols to monitor.
            + Clears previously active subscriptions.
            - Does not validate symbol availability on Binance.
            </summary>
            <param name="symbols">Symbols to track.</param>
        </member>
        <member name="M:Ark.Api.Binance.TickerFollowupService.GetHistorySnapshot">
            <summary>
            Returns a copy of the accumulated ticker history for each tracked symbol.
            + Useful for diagnostics or backtesting.
            - Only in-memory data is available; no persistence is performed.
            </summary>
            <returns>A dictionary mapping each symbol to its recorded ticker values.</returns>
        </member>
        <member name="M:Ark.Api.Binance.TickerFollowupService.ExecuteBlAsync(System.Threading.CancellationToken)">
            <inheritdoc />
            <summary>
            Retrieves ticker information from Binance for each configured symbol.
            </summary>
            <param name="cancellationToken">Token used to cancel the operation.</param>
            <returns>The result of the ticker retrieval.</returns>
            <example>
            <code>
            var result = await service.ExecuteBlAsync(CancellationToken.None);
            </code>
            <output>Returns <c>Result.Success</c> if all ticker calls succeed.</output>
            </example>
        </member>
        <member name="M:Ark.Api.Binance.TickerFollowupService.Execute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Ark.Api.Binance.BinanceOptions">
            <summary>
            Global options for configuring the Binance API access.
            + Centralizes credentials, rate limits and service settings.
            - Misconfiguration may lead to authentication failures or bans.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.ApiKey">
            <summary>
            API key for authenticated endpoints.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.ApiSecret">
            <summary>
            API secret for authenticated endpoints.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.BaseUrl">
            <summary>
            Base URL of the Binance Futures REST API.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.TestnetBaseUrl">
            <summary>
            Base URL of the Binance Futures Testnet.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.MaxConcurrentRequests">
            <summary>
            Maximum number of concurrent requests allowed by the host.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.Limits">
            <summary>
            Configured rate limits.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.Environment">
            <summary>
            Gets or sets the environment used to connect to Binance.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.LogLevel">
            <summary>
            Specifies the minimal log level for Binance diagnostics.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.RetryCount">
            <summary>
            Number of retry attempts used by the resilience pipeline.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.Services">
            <summary>
            Service specific settings.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceOptions.OwnerId">
            <summary>
            Identifier of the Binance account owner.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.BinanceServiceSettings">
            <summary>
            Settings for a Binance hosted service.
            + Aggregates ticker, order and position follow-up configurations.
            - Misaligned settings can lead to excessive API usage.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceServiceSettings.TickerFollowupSettings">
            <summary>
            Settings for ticker follow-up.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceServiceSettings.OrderFollowupSettings">
            <summary>
            Settings for order follow-up.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.BinanceServiceSettings.PositionFollowupSettings">
            <summary>
            Settings for position follow-up.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.ILoggingOptions">
            <summary>
            Exposes a configurable logging level.
            + Enables dynamic verbosity control across services.
            - Single setting applies globally; no per-category granularity.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.ILoggingOptions.LogLevel">
            <summary>
            Minimal log level to use for diagnostics.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.OrderFollowupSettings">
            <summary>
            Settings for order monitoring services.
            + Placeholder for scheduling and filtering options.
            - Currently empty; future enhancements may add properties.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.PositionFollowupSettings">
            <summary>
            Settings for position monitoring services.
            + Intended to tune polling intervals and symbol selection.
            - Currently contains no configurable properties.
            </summary>
        </member>
        <member name="T:Ark.Api.Binance.TickerFollowupSettings">
            <summary>
            Settings controlling ticker monitoring.
            + Configures which symbols to track and how updates are received.
            - Incorrect configuration may miss market movements.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerFollowupSettings.Tickers">
            <summary>
            Symbols to monitor.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerFollowupSettings.TickerType">
            <summary>
            Type of ticker.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerFollowupSettings.OnlyTradingTickerAvailable">
            <summary>
            Only tickers currently trading.
            </summary>
        </member>
        <member name="P:Ark.Api.Binance.TickerFollowupSettings.UseWebSocket">
            <summary>
            Use web sockets instead of polling.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Resilience.ResiliencePipeline">
            <summary>
            Executes asynchronous actions with basic retry logic.
            + Handles transient failures without extra dependencies.
            - Lacks delay or backoff between retries.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with the specified retry limit.
            + Allows customizing retry attempts.
            - No validation on negative values.
            </summary>
            <param name="retryAttempts">Maximum retry attempts.</param>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipeline.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes the provided asynchronous <paramref name="action"/> until it succeeds or the retry limit is reached.
            + Simplifies transient fault handling for <see cref="T:System.Threading.Tasks.Task"/>-based work.
            - No delay is applied between retries.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
            <param name="action">Operation to execute.</param>
            <param name="cancellationToken">Token used to cancel the operation.</param>
            <returns>
            <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous execution.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Resilience.ResiliencePipelineBuilder`1">
            <summary>
            Builds <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline`1"/> instances.
            + Provides fluent configuration for pipeline behavior.
            - Limited to retry options.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
            <typeparam name="TResult">Type of result produced by the pipeline.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipelineBuilder`1.AddRetry(System.Action{Microsoft.Extensions.Resilience.RetryOptions})">
            <summary>
            Adds retry support to the pipeline using the provided <paramref name="configure"/> delegate.
            + Enables custom retry configuration.
            - Cannot configure backoff or other strategies.
            </summary>
            <param name="configure">Delegate to configure <see cref="T:Microsoft.Extensions.Resilience.RetryOptions"/>.</param>
            <returns>
            The current <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipelineBuilder`1"/> instance for chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipelineBuilder`1.Build">
            <summary>
            Builds a <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline`1"/> using the configured options.
            + Produces a pipeline ready for execution.
            - Only retry attempts are considered.
            </summary>
            <returns>
            A configured <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline`1"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Resilience.ResiliencePipeline`1">
            <summary>
            Executes asynchronous functions with retry behavior and a result.
            + Handles transient failures for operations returning a value.
            - Does not support jitter or exponential backoff.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
            <typeparam name="TResult">Type of the result returned by the operation.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipeline`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with the specified retry limit.
            + Allows customizing retry attempts.
            - No validation on negative values.
            </summary>
            <param name="retryAttempts">Maximum retry attempts.</param>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipeline`1.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <summary>
            Executes the provided asynchronous <paramref name="action"/> with retry behavior.
            + Simplifies transient fault handling.
            - No delay between retries.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
            <param name="action">Operation to execute.</param>
            <param name="cancellationToken">Token used to cancel the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation result.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Resilience.ResiliencePipelineProvider">
            <summary>
            Provides <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline"/> instances with unified retry settings.
            + Centralizes pipeline creation logic.
            - Offers only simple retry configuration.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipelineProvider.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipelineProvider"/> class.
            + Exposes default retry attempt configuration.
            - Does not allow per-pipeline customization.
            </summary>
            <param name="retryAttempts">Maximum number of retry attempts for pipelines.</param>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipelineProvider.GetPipeline(System.String)">
            <summary>
            Retrieves a pipeline by name.
            + Creates simple retry pipelines on demand.
            - Ignores the provided <paramref name="name"/> parameter.
            </summary>
            <param name="name">Identifier of the pipeline.</param>
            <returns>
            <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline"/> configured with the provider's retry attempts.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.Resilience.ResiliencePipelineProvider.GetPipeline``1(System.String)">
            <summary>
            Retrieves a pipeline for the specified result type.
            + Creates generic pipelines on demand.
            - Name parameter is not used.
            </summary>
            <typeparam name="TResult">Type of the operation result.</typeparam>
            <param name="name">Identifier of the pipeline.</param>
            <returns>
            <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline`1"/> configured with the provider's retry attempts.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Resilience.RetryOptions">
            <summary>
            Configures retry behavior for the <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline"/> and <see cref="T:Microsoft.Extensions.Resilience.ResiliencePipeline`1"/>.
            + Simplifies specifying maximum retry attempts.
            - Lacks support for backoff strategies.
            Ref: <see href="https://learn.microsoft.com/dotnet/core/extensions/resilience"/>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Resilience.RetryOptions.MaxRetryAttempts">
            <summary>
            Maximum number of retry attempts before failing.
            </summary>
        </member>
    </members>
</doc>
